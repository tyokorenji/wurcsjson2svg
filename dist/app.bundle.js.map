{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./SVG_converter.js","webpack:///./js/class/Bracket.js","webpack:///./js/class/Bridge.js","webpack:///./js/class/BridgeEdge.js","webpack:///./js/class/Cyclic.js","webpack:///./js/class/Edge.js","webpack:///./js/class/Fragment.js","webpack:///./js/class/FragmentBracket.js","webpack:///./js/class/Glycan.js","webpack:///./js/class/Glycobond.js","webpack:///./js/class/Modification.js","webpack:///./js/class/Modificationbond.js","webpack:///./js/class/MultipleModification.js","webpack:///./js/class/MultipleModificationBind.js","webpack:///./js/class/Node.js","webpack:///./js/class/ParserClass/JSONParser.js","webpack:///./js/class/ParserClass/PaeserFragments.js","webpack:///./js/class/ParserClass/ParserBinding.js","webpack:///./js/class/ParserClass/ParserBridge.js","webpack:///./js/class/ParserClass/ParserFragmentEdge.js","webpack:///./js/class/ParserClass/ParserMonosaccharide.js","webpack:///./js/class/ParserClass/ParserRepeat.js","webpack:///./js/class/RepeatBracket.js","webpack:///./js/class/Sugar.js","webpack:///./js/class/UndefSugar.js","webpack:///./js/class/VisibleElement.js","webpack:///./js/createSVG/createSVGFragmetnBracket.js","webpack:///./js/createSVG/createSVGMain.js","webpack:///./js/createSVG/createSVGShape.js","webpack:///./js/createSVG/culcEachSugarCoordinate.js","webpack:///./js/createSVG/setXLayer.js","webpack:///./js/createSVG/setYLayer.js","webpack:///./js/createSVG/sortChildSugars.js","webpack:///./js/data/JSONKeys.js","webpack:///./js/data/SNFGGlycanTable.js","webpack:///./js/data/getColor.js","webpack:///./js/data/graphicsData.js","webpack:///./js/data/greekNumber.js","webpack:///./js/data/modificationData.js","webpack:///./js/drawGlycan/culcMaxMinLayer.js","webpack:///./js/getRelativeCoordinate.js","webpack:///./js/jsonParser/assignDataStructure/assignBridge.js","webpack:///./js/jsonParser/assignDataStructure/assignEdges.js","webpack:///./js/jsonParser/assignDataStructure/assignFragment.js","webpack:///./js/jsonParser/assignDataStructure/assignMain.js","webpack:///./js/jsonParser/assignDataStructure/assignMonosaccharide.js","webpack:///./js/jsonParser/assignDataStructure/assignRepeat.js","webpack:///./js/jsonParser/check/checkBridge.js","webpack:///./js/jsonParser/check/checkEdge.js","webpack:///./js/jsonParser/check/checkFragment.js","webpack:///./js/jsonParser/check/checkLinkagetype.js","webpack:///./js/jsonParser/check/checkModifications.js","webpack:///./js/jsonParser/check/checkMonosaccharides.js","webpack:///./js/jsonParser/check/checkNotationValue.js","webpack:///./js/jsonParser/check/checkPosition.js","webpack:///./js/jsonParser/check/checkProbability.js","webpack:///./js/jsonParser/check/checkRepeat.js","webpack:///./js/jsonParser/check/checkSubstituents.js","webpack:///./js/nodeModeSearch.js","webpack:///./js/nodeModeType.js","webpack:///./main.js","webpack:///external \"http\""],"names":["SVG_convert","json","jsonObejct","JSON","parse","parser","JSONParser","glycoJSON","checkJson","glycans","assignData","Bracket","SVGShape","svg","VisibleElement","Bridge","name","parentSugar","childSugar","edge","Node","BridgeEdge","Glycobond","Cyclic","sugar","reductionSugar","nonReductionSugar","Edge","linkageType","parentPosition","linkage","Object","keys","length","lineTo","children","graphics","_activeInstructions","x","y","moveTo","middleCoordinate","quarterCoordinate1","quarterCoordinate2","push","parent","child","Fragment","parentFragmentBracket","fragmentBracket","highLight","parentBonds","getParentBond","parentBond","hasChildSugars","liaise","stageUpdate","childSugars","isChildCyclicEmpty","getChildCyclic","getReductionSugar","offLight","plus","recuversiveSetXLayer","getRootNode","recuversiveSetYLayer","Glycan","plusX","setXLayer","getXLayer","getChildSugars","plusY","setYLayer","getYLayer","FragmentBracket","parentSugars","parentGlycan","childGlycans","isResuctionSugar","getParentSugars","glycan","i","splice","nonReductionSugars","recuversiveNonReductionSugar","getParentGlycan","rootNode","Sugar","amino","maxXLayer","maxYLayer","minYLayer","bracket","layer","maxXYayer","hasParentSugars","console","log","result","recuversiveCheckSugarInGlycan","child_child","recversiveCulcMaxMinYLayer","childAnomeric","childPosition","parentId","svgLineShape","svgTextShape","svgChildPosition","svgParentPosition","jsonParentId","jsonChildId","anomeric","_stroke","style","alpha","id","getSvgParentPosition","getSvgChildPosition","num","posi","minParentPosition","Modification","modificationBond","childCommaShape","position","Modificationbond","parentSugarPosition","NaN","isNaN","MultipleModification","MultipleBind","fuzzy","MultipleModificationBind","childNodes","sortedList","bindList","bind","getParentSugar","culcMinParentPosition","sort","a","b","Number","cbind","node","text","monosaccharides","subfragments","MONOSACCHARIDES_FLAG","FRAGMENTS_FLAG","REPEAT_FLAG","EDGES_FLAG","BRIDGE_FLAG","key","toLowerCase","JSONKeys","Monosaccharides","Fragments","Repeat","Edges","alert","ParserFragments","Acceptor","Donor","ParserFragmentEdge","ParentIsGlycan","ac","donor","nonReductionObj","monosaccharideObj","nonReduArray","flag2","flag","sugarId","recuversiveCheckGlycan","parentArray","ParserBinding","Position","parentSide","childSide","don","ParserBridge","Notation","dataNoatation","no","modifiData","getNotation","ParserMonosaccharide","Modifications","TrivialName","Substituents","Configuration","SuperClass","RingSize","AnomState","AnomPosition","modification","trivialName","substituents","config","sClass","size","anom","notation","con","ring","superClass","SNFGKeys","SNFGSymbolGlycan","CONFIG_FLAG","RING_FLAG","NOTATION_FLAG","SNKey","SUGAR_FLAG","isomer","changeName","setIsomer","setRing","UndefSugar","greekNumber","setCarbBone","modifications","mody","modyBond","position_key","notation_key","compareModifiData","setName","setParentSugarPosition","setModificationBond","setMultipleBind","setParentSugars","setChildModifications","substituent","status_key","accepter_key","positionKey","Status","setAnomeric","ParserRepeat","Min","Max","Start","End","numOfRepeat","min","max","start","end","String","RepeatBracket","endSugar","startSugar","repeatNumber","childCyclic","parentCyclic","Xlayer","Ylayer","childModifications","childMultipleBind","carbBone","repeatBracket","childBridge","svgXCoord","svgYCoord","svgShape","isomerShape","ringShape","stage","update","xCoord","yCoord","setGlycan","setChildGlycan","cyclic","YLayer","bridge","coord","addString","getMeasuredWidth","getMeasuredHeight","createSVGFragmentsBracket","nonReductionSguars","rootNodes","bracketCoordObj","getChildGlycans","fragment","isEmptyParentGlycan","culcMaxMinCoord","getParentGlycanNonReductionSguars","setSVGShape","createSVG","basicData","symbolSize","symbolDistance","fragmentRootNodes","reduc_maxY","reduc_minY","root_maxY","root_minY","topY","bottomY","X","reduct","getSvgYCoord","fraRoot","getSvgXCoord","centerY","createSVGMain","glycanArray","fragmentBrackets","normalDistace","maxMinLayer","viewBox","culcViewBox","resultSVGShape","recuversiveCreateSVgShapeImport","bindLineSting","bindSvgString","getSVGShape","normalDistance","parentBind","resultShape","hasParentBond","getSvgLineShape","getSvgTextShape","getSvgShape","createSVGShape","shapeSymbol","getName","shapeType","setSvgShape","createSVGNodeSymbol","isEmptyParentSugar","createParentBonSVGLineText","parentX","parentY","childX","getChildSugar","childY","hasChildAnomeric","getChildAnomeric","hasSvgParentPosition","parentPositionNum","lineText","svgLinkageUp","svgLinkagedown","setSvgLineShape","setSvgTextShape","color","subColor","exColorShape","exColor","A","scale","width_size","nodeModeType","HEXOSE","HEXNAC","HEXOSAMINE","HEXURONATE","DEOXYHEXOSE","DEOXYHEXNAC","DI_DEOXYHEXOSE","PENTOSE","DEOXYNONULOSONATE","DI_DEOXYNONULOSONATE","UNKNOWN","ASSIGNED","ALTA","IDOA","culc_each_sugar_coordinate","XLayer","svgCoord","setSvgXCoord","setSvgYCoord","getParentFragmentBracket","maxX","culcPlucXLayer","getMaxXLayer","getGlycan","setMaxXLayer","vSugar","props","mainGlycan","serchFragmentBracket","vNode","fragments","setChildSugars","setEndFragmentYLayer","reverse","minY","maxY","middleLayer","Math","floor","culcPlucYLayer","isFragmentBracketEmpty","counter","getFragmentBracket","same_FLAG","most_layer","cyclicSugar","recurversiveSortChildSugars","sortChildSugar","PositionOne","Probability","High","Low","LinkageType","shortName","systematicNmae","getColor","culc_max_min_layer","maxMInLayer","recuversive_culc_layer","getRelativeCoordinate","mouseX","mouseY","distace","flagX","flagY","canvasSize","assignBridge","bridges","bridgeObj","bridge_key","checkNoatation","assignEdges","edges","edgeObj","edge_key","checkWhichSide","createGlycoBond","assignFragment","fragmentObj","frag_key","parser_edge","assignMain","monosaccharide_key","edges_key","repeat_key","fragment_key","repeatObj","combineMonoEdge","combineBridgeGlycan","combineRepeat","setFragment","checkNonReductionSugars","checkFragmentParentType","setGlycanData","setFragmentData","monoObj","setRootNode","setParentBond","setChildAnomeric","getAnomeric","setParentSugar","setChildSugar","linktype","setLinkageType","slice","b_key","glycobond","FLAG","bridgeEdge","setEdge","getLinkageType","setChildPosition","getChildPosition","setParentPositon","getParentPosition","setChildBridge","re_key","setReductionSugar","setNonReductionSugar","setChildCyclic","setParentCyclic","setStartSugar","setEndSugar","setReepatNumber","setRepeatBracket","resultObj","recuversiveCheck","nonSugars","checkParent","recuversiveSetGlycanData","setParentGlycan","setFragmentBracket","setChildGlycans","setParentFragmentBracket","monoId","assignMonosaccharide","monosaccharide","mono_key","checkSNFGNoatation","checkModificaiton","checkSubstituents","checkAnome","assignRepeat","repeats","checkNumOfReapt","check_bridge","bridge_numKeys","bridge_numKey","bridge_keys","ACCEPTOR_FLAG","DONOR_FLAG","LINKAGETYPE_FLAG","check_edge","edge_numKeys","edge_numKey","edge_keys","ACCEPTER_FLAG","POSITION_FLAG","PROBANILITY_FLAG","check_fragment_edge","check_fragment","fragment_numKeys","fragment_numKey","fragment_keys","EDGE_FLAG","monoKey","check_linkagetype","linkage_keys","linkage_key","check_modifications","positionNum","check_monosaccharides","monosaccharides_numKeys","MODIFICATION_FLAG","TRIVIALNAME_FLAG","SUBSTITUENTS_FLAG","CONFIGURATION_FLAG","SUPERCLASS_FLAG","RINGSIZE_FLAG","ANOMSTATE_FLAG","ANOMPOSITION_FLAG","RESULT_FLAG","monosaccharides_numKey","monosaccharides_keys","monosaccharides_key","configuration","check_notation_value","check_position","position_keys","accepter","check_probability","probability","probability_keys","HIGH_FLAG","LOW_FLAG","probability_key","check_repeat","repeat","repeat_numKeys","repeat_numKey","repeat_keys","MIN_FLAG","MAX_FLAG","START_FLAG","PROBABILITY_FLAG","END_FLAG","LINKAGE_FLAG","check_substituents","STATUS_FLAG","nodeModeSearch","nodeType","target","GLC","MAN","GAL","GUL","ALT","ALL","TAL","IDO","GLCNAC","MANNAC","GALNAC","GULNAC","ALTNAC","ALLNAC","TALNAC","IDONAC","GLCN","MANN","GALN","GULN","ALTN","ALLN","TALN","IDON","GLCA","MANA","GALA","GULA","ALLA","TALA","QUI","RHA","D6GUL","D6ALT","D6TAL","FUC","QUINAC","RHANAC","D6ALTNAC","D6TALNAC","FUCNAC","OLI","TYV","ABE","PAR","DIG","COL","ARA","LYX","XYL","RIB","KDN","NEU5AC","NEU5GC","NEU","SIA","PSE","LEG","ACI","E4LEG","BAC","LDMANHEP","KDO","DHA","DDMANHEP","MURNAC","MURNGC","MUR","API","FRU","TAG","SOR","PSI","NOT_SELECTED","getSymbolColor","SNFGNameSymbol","Symbol","http","require","server","createServer","req","res","method","body","on","chunk","listen"],"mappings":"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","file":"app.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./main.js\");\n","//@flow\n\"use strict\";\nimport { JSONParser } from \"./js/class/ParserClass/JSONParser\";\nimport {Glycan} from \"./js/class/Glycan\";\nimport { createSVGMain } from \"./js/createSVG/createSVGMain\";\n\n\nexport const SVG_convert = (json) => {\n    let jsonObejct: Object = JSON.parse(json);\n    let parser: JSONParser = new JSONParser(jsonObejct);\n    let glycoJSON: boolean = parser.checkJson();\n    if(!glycoJSON) return false;\n    let glycans: Array<Glycan> = parser.assignData();\n    return createSVGMain(glycans);\n};","//@flow\n\"use strict\";\n\nimport { VisibleElement } from \"./VisibleElement\";\n\nclass Bracket extends VisibleElement{\n    SVGShape: string;\n\n    constructor(){\n        super();\n        this.SVGShape = \"\";\n    }\n    setSVGShape(svg: string) {\n        this.SVGShape = svg;\n    }\n    getSVGShape(): string {\n        return this.SVGShape;\n    }\n}\n\nexport { Bracket };","//@flow\n\"use strict\";\n\nimport { Node } from \"./Node\";\nimport { Sugar } from \"./Sugar\";\nimport { BridgeEdge } from \"./BridgeEdge\";\n\nexport class Bridge extends Node {\n    name: string;\n    parentSugar: Object;\n    edge: Object;\n\n    constructor(){\n        super();\n        this.name = \"\";\n        this.parentSugar = {};\n        this.childSugar = {};\n        this.edge = {};\n    }\n\n    setName(name: string) {\n        this.name = name;\n    }\n    getName(): string {\n        return this.name;\n    }\n\n    setParentSugar(parentSugar: Sugar) {\n        this.parentSugar = parentSugar;\n    }\n    getParentSugar(): Sugar {\n        return this.parentSugar;\n    }\n    setEdge(edge: BridgeEdge) {\n        this.edge = edge;\n    }\n    getEdge(): BridgeEdge {\n        return this.edge;\n    }\n\n}","//@flow\n\"use strict\";\n\nimport { Glycobond } from \"./Glycobond\";\n\nexport class BridgeEdge extends Glycobond {\n\n    constructor(){\n        super();\n    }\n}","//@flow\n\"use strict\";\n\nimport { Sugar } from \"./Sugar\";\n\nclass Cyclic{\n    reductionSugar: Sugar;\n    nonReductionSugar: Sugar;\n\n    constructor(){\n    }\n\n    setReductionSugar(sugar: Sugar) {\n        this.reductionSugar = sugar;\n        return;\n    }\n    getReductionSugar(): Sugar {\n        return this.reductionSugar;\n    }\n\n    setNonReductionSugar(sugar: Sugar) {\n        this.nonReductionSugar = sugar;\n        return;\n    }\n    getNonReductionSugar(): Sugar {\n        return this.nonReductionSugar;\n    }\n}\n\nexport { Cyclic };","//@flow\n\"use strict\";\n\nimport { VisibleElement } from \"./VisibleElement\";\nimport { Sugar } from \"./Sugar\";\n\nclass Edge extends VisibleElement{\n    linkageType: string;\n    parentSugar: Object;\n    parentPosition: string;  //親Nodeの結合位置(未定義の場合\"undefined\")\n\n    constructor(){\n        super();\n        this.linkageType = \"undefined\";\n        this.parentSugar = {};\n        this.parentPosition = \"undefined\";\n    }\n\n    setLinkageType(linkage: string) {\n        this.linkageType = linkage;\n        return;\n    }\n    getLinkageType(): string {\n        return this.linkageType;\n    }\n\n    setParentSugar(sugar: Sugar) {\n        this.parentSugar = sugar;\n        return;\n    }\n    getParentSugar(): Sugar {\n        return this.parentSugar;\n    }\n    isEmptyParentSugar(): boolean {\n        return !Object.keys(this.parentSugar).length;\n    }\n\n    hasParentPosition(): boolean {\n        if (this.parentPosition === \"undefined\") return false;\n        else return true;\n    }\n    getParentPosition(): string {\n        return this.parentPosition;\n    }\n    setParentPositon(parentPosition: string) {\n        this.parentPosition = parentPosition;\n        return;\n    }\n\n    calcMiddleCoordinate(): Array<number> {\n        let lineTo: Array<number> = [ this.children[0].graphics._activeInstructions[0].x, this.children[0].graphics._activeInstructions[0].y];\n        let moveTo: Array<number> = [ this.children[0].graphics._activeInstructions[1].x, this.children[0].graphics._activeInstructions[1].y];\n        return [(lineTo[0] + moveTo[0]) / 2, (lineTo[1] + moveTo[1]) / 2];\n    }\n\n    calcQuaterCoordinate(middleCoordinate: Array<number>): Array<Array<number>> {\n        let quarterCoordinate1: Array<number> = [];\n        let quarterCoordinate2: Array<number> = [];\n        quarterCoordinate1.push((middleCoordinate[0] + this.children[0].graphics._activeInstructions[0].x )/ 2);\n        quarterCoordinate1.push((middleCoordinate[1] + this.children[0].graphics._activeInstructions[0].y )/ 2);\n        quarterCoordinate2.push((middleCoordinate[0] + this.children[0].graphics._activeInstructions[1].x )/ 2);\n        quarterCoordinate2.push((middleCoordinate[1] + this.children[0].graphics._activeInstructions[1].y )/ 2);\n        if (quarterCoordinate1[0] > quarterCoordinate2[0]) {\n            return [quarterCoordinate1, quarterCoordinate2];\n        }\n        else {\n            return [quarterCoordinate2, quarterCoordinate1];\n        }\n    }\n\n    whitchParentHighChildLow(parent: Array<number>, child: Array<number>): boolean {\n        if(parent[1] < child[1] ) return true;\n        else { return false; }\n    }\n\n}\n\nexport { Edge };","//@flow\n\"use strict\";\n\nimport { Glycan } from \"./Glycan\";\nimport { FragmentBracket } from \"./FragmentBracket\";\nimport {Sugar} from \"./Sugar\";\nimport {Glycobond} from \"./Glycobond\";\n\nexport class Fragment extends Glycan {\n    parentFragmentBracket: FragmentBracket;\n\n    constructor() {\n        super();\n        this.parentFragmentBracket;\n    }\n\n    setParentFragmentBracket(fragmentBracket: FragmentBracket) {\n        this.parentFragmentBracket = fragmentBracket;\n        return;\n    }\n\n    getParentFragmentBracket(): FragmentBracket {\n        return this.parentFragmentBracket;\n    }\n\n    highLight(sugar: Sugar) {\n        sugar.highLight();\n        let parentBonds = sugar.getParentBond();\n        for (let parentBond: Glycobond of parentBonds) {\n            parentBond.highLight();\n        }\n        if (!sugar.hasChildSugars()){\n            liaise.stageUpdate();\n            return;\n        }\n        else {\n            for (let child: Sugar of sugar.childSugars) {\n                if(!sugar.isChildCyclicEmpty()) {\n                    if(sugar.getChildCyclic().getReductionSugar() === child) {\n                        continue;\n                    }\n                }\n                this.highLight(child);\n            }\n        }\n        liaise.stageUpdate();\n        return;\n    }\n\n    offLight(sugar: Sugar) {\n        sugar.offLight();\n        for (let parentBond: Glycobond of sugar.getParentBond()) {\n            parentBond.offLight();\n        }\n        if (!sugar.hasChildSugars()){\n            liaise.stageUpdate();\n            return;\n        }\n        else {\n            for (let child: Sugar of sugar.childSugars) {\n                if(!sugar.isChildCyclicEmpty()) {\n                    if(sugar.getChildCyclic().getReductionSugar() === child) {\n                        continue;\n                    }\n                }\n                this.offLight(child);\n            }\n        }\n        liaise.stageUpdate();\n        return;\n    }\n    culcPlucXLayer(plus: number) {\n        recuversiveSetXLayer(this.getRootNode(), plus + 1);\n    }\n    culcPlucYLayer(plus: number) {\n        recuversiveSetYLayer(this.getRootNode(), plus);\n    }\n}\n\nconst recuversiveSetXLayer = (sugar: Sugar, plusX: number) => {\n    sugar.setXLayer(sugar.getXLayer() + plusX);\n    if(sugar.hasChildSugars()) {\n        if(sugar.isChildCyclicEmpty()) {\n            for(let child: Sugar of sugar.getChildSugars()) {\n                recuversiveSetXLayer(child, plusX);\n            }\n        }\n        else {\n            for(let child: Sugar of sugar.getChildSugars()) {\n                if(sugar.getChildCyclic().getReductionSugar() === child) continue;\n                else recuversiveSetXLayer(child, plusX);\n            }\n        }\n    }\n    else {\n        return;\n    }\n};\nconst recuversiveSetYLayer = (sugar: Sugar, plusY: number) => {\n    sugar.setYLayer(sugar.getYLayer() + plusY);\n    if(sugar.hasChildSugars()) {\n        if(sugar.isChildCyclicEmpty()) {\n            for(let child: Sugar of sugar.getChildSugars()) {\n                recuversiveSetYLayer(child, plusY);\n            }\n        }\n        else {\n            for(let child: Sugar of sugar.getChildSugars()) {\n                if(sugar.getChildCyclic().getReductionSugar() === child) continue;\n                else recuversiveSetYLayer(child, plusY);\n            }\n        }\n    }\n    else {\n        return;\n    }\n};","//@flow\n\"use strict\";\n\nimport { Bracket } from \"./Bracket\";\nimport { Sugar } from \"./Sugar\";\n\nclass FragmentBracket extends Bracket {\n    parentSugars: Array<Sugar>;  //フラグメントがつく親単糖\n    parentGlycan: Object ; //親となる糖鎖構造\n    childGlycans: Array<Object>;  //フラグメントの糖鎖構造\n    ParentNonReductionSugars: Array<Sugar>;\n\n    constructor(){\n        super();\n        this.parentSugars = [];\n        this.parentGlycan = {};\n        this.childGlycans = [];\n        this.isResuctionSugar = false;\n\n    }\n\n    getParentSugars(): Array<Sugar> {\n        return this.parentSugars;\n    }\n\n    setParentSugars(sugar: Sugar) {\n        this.parentSugars.push(sugar);\n        return;\n    }\n    hasParentSugars(): boolean {\n        if (this.getParentSugars().length === 0) return false;\n        else return true;\n    }\n\n\n    getParentGlycan(): Object {\n        return this.parentGlycan;\n    }\n\n    setParentGlycan(glycan: Object) {\n        this.parentGlycan = glycan;\n        return;\n    }\n    isEmptyParentGlycan(): boolean {\n        return !Object.keys(this.parentGlycan).length;\n    }\n\n    getChildGlycans(): Array<Object> {\n        return this.childGlycans;\n    }\n\n    setChildGlycans(glycan: Object) {\n        this.childGlycans.push(glycan);\n        return;\n    }\n\n    hasChildGlycans(): boolean {\n        if(this.childGlycans.length === 0) return false;\n        else return true;\n    }\n    spliceChildGlycans(glycan: Object) {\n        for(let i = 0; i < this.childGlycans.length; i++) {\n            if(glycan === this.childGlycans[i]) {\n                this.childGlycans.splice(i, 1);\n            }\n        }\n        return;\n    }\n    getParentGlycanNonReductionSguars(): Array<Sugar> {\n        let nonReductionSugars: Array<Sugar> = [];\n        return recuversiveNonReductionSugar(this.getParentGlycan().getRootNode(), nonReductionSugars);\n\n    }\n\n    changeIsReductionSugar() {\n        if(this.isResuctionSugar) {\n            this.isResuctionSugar = false;\n        }\n        else {\n            this.isResuctionSugar = true;\n        }\n    }\n\n}\n\nconst recuversiveNonReductionSugar = (sugar: Sugar, nonReductionSugars: Array<Sugar>): Array<Sugar> => {\n    if(sugar.hasChildSugars()) {\n        if(sugar.isChildCyclicEmpty()){\n            for(let child: Sugar of sugar.getChildSugars()) {\n                nonReductionSugars = recuversiveNonReductionSugar(child, nonReductionSugars);\n            }\n        }\n        else {\n            if(sugar.getChildSugars().length === 1) {\n                nonReductionSugars.push(sugar);\n            }\n            else {\n                for(let child: Sugar of sugar.getChildSugars()) {\n                    if(child === sugar.getChildCyclic().getReductionSugar()) continue;\n                    else {\n                        nonReductionSugars = recuversiveNonReductionSugar(child, nonReductionSugars);\n                    }\n                }\n            }\n        }\n    }\n    else {\n        nonReductionSugars.push(sugar);\n        return nonReductionSugars;\n    }\n    return nonReductionSugars;\n};\n\n\n\nexport { FragmentBracket };","//@flow\n\"use strict\";\n\nimport { Sugar } from \"./Sugar\";\nimport { FragmentBracket } from \"./FragmentBracket\";\nimport {Glycobond} from \"./Glycobond\";\n// import { Fragment } from \"./Fragment\";\n\nclass Glycan {\n    rootNode: Sugar;  //その糖鎖構造のルート単糖\n    amino: string;  //糖鎖が就職するタンパク質の結合アミノ酸部位\n    fragmentBracket: Object;\n    maxXLayer: number;\n    maxYLayer: number;\n    minYLayer: number;\n    // parentGlycan: Glycan;\n    // parentSugars: Array<Sugar>;\n    // childGlycans: Array<Glycan>;\n\n    constructor(){\n        this.rootNode = new Sugar(\"undefined\");\n        this.amino = \"\";\n        this.fragmentBracket = {};\n        this.maxXLayer = 0;\n        this.maxYLayer = 0;\n        this.minYLayer = 1000;\n        // this.parentGlycan = new Glycan();\n        // this.parentSugars = [];\n        // this.childGlycans = [];\n    }\n\n    getRootNode(): Sugar {\n        return this.rootNode;\n    }\n\n    setRootNode(sugar: Sugar) {\n        this.rootNode = sugar;\n        return;\n    }\n\n    getAmino(): string {\n        return this.amino;\n    }\n\n    setAmino(amino: string) {\n        this.amino = amino;\n        return;\n    }\n\n    setFragmentBracket(bracket: FragmentBracket) {\n        this.fragmentBracket = bracket;\n        return;\n    }\n    getFragmentBracket(): FragmentBracket {\n        return this.fragmentBracket;\n    }\n    isFragmentBracketEmpty(): boolean {\n        return !Object.keys(this.fragmentBracket).length;\n    }\n    setMaxXLayer(layer: number) {\n        if(this.maxXLayer < layer) {\n            this.maxXLayer = layer;\n        }\n    }\n    getMaxXLayer(): number {\n        return this.maxXLayer;\n    }\n    setMaxYLayer(layer: number) {\n        if(this.maxYLayer < layer) {\n            this.maxYLayer = layer;\n        }\n    }\n    getMaxYLayer(): number {\n        return this.maxXYayer;\n    }\n\n\n    highLight(sugar: Sugar) {\n        sugar.highLight();\n        switch (sugar) {\n            case this.rootNode: {\n                // if(this.rootNode instanceof Fragment) {\n                //     this.rootNode.getParentBond().highLight();\n                // }\n                if(sugar.hasParentSugars()) {\n                    console.log(sugar.hasParentSugars());\n                    let parentBonds = sugar.getParentBond();\n                    for (let parentBond: Glycobond of parentBonds) {\n                        parentBond.highLight();\n                    }\n                }\n                break;\n            }\n            default: {\n                let parentBonds = sugar.getParentBond();\n                for (let parentBond: Glycobond of parentBonds) {\n                    parentBond.highLight();\n                }\n                break;\n            }\n        }\n        if (!sugar.hasChildSugars()){\n            liaise.stageUpdate();\n            return;\n        }\n        else {\n            for (let child: Sugar of sugar.childSugars) {\n                if(!sugar.isChildCyclicEmpty()) {\n                    if(sugar.getChildCyclic().getReductionSugar() === child) {\n                        continue;\n                    }\n                }\n                this.highLight(child);\n            }\n        }\n        liaise.stageUpdate();\n        return;\n    }\n\n    offLight(sugar: Sugar) {\n        sugar.offLight();\n        switch (sugar) {\n            case this.rootNode: {\n                if(sugar.hasParentSugars()) {\n                    let parentBonds = sugar.getParentBond();\n                    for (let parentBond: Glycobond of parentBonds) {\n                        parentBond.offLight();\n                    }\n                }\n                break;\n            }\n            default: {\n                let parentBonds = sugar.getParentBond();\n                for (let parentBond: Glycobond of parentBonds) {\n                    parentBond.offLight();\n                }\n                break;\n            }\n        }\n        if (!sugar.hasChildSugars()){\n            liaise.stageUpdate();\n            return;\n        }\n        else {\n            for (let child: Sugar of sugar.childSugars) {\n                if(!sugar.isChildCyclicEmpty()) {\n                    if(sugar.getChildCyclic().getReductionSugar() === child) {\n                        continue;\n                    }\n                }\n                this.offLight(child);\n            }\n        }\n        liaise.stageUpdate();\n        return;\n    }\n\n    checkSugarInGlycan(sugar: Sugar): boolean {\n        let result: boolean = false;\n        result = this.recuversiveCheckSugarInGlycan(sugar, this.getRootNode());\n        return result;\n    }\n    recuversiveCheckSugarInGlycan(sugar: Sugar, child: Sugar): boolean {\n        if (sugar === child) {\n            return true;\n        }\n        else if (!child.isChildCyclicEmpty()) {\n            return false;\n        }\n        else {\n            for (let child_child: Sugar of child.getChildSugars()) {\n                let result: boolean = this.recuversiveCheckSugarInGlycan(sugar, child_child);\n                if (result) {\n                    return result;\n                }\n            }\n        }\n        return false;\n    }\n\n    recversiveCulcMaxMinYLayer(sugar: Sugar) {\n        if(sugar.hasChildSugars()) {\n            if(sugar.isChildCyclicEmpty()) {\n                for(let child: Sugar of sugar.getChildSugars()){\n                    this.recversiveCulcMaxMinYLayer(child);\n                }\n            }\n            else {\n                for(let child: Sugar of sugar.getChildSugars()) {\n                    if(child === sugar.getChildCyclic().getReductionSugar()) {\n                        continue;\n                    }\n                    else{\n                        this.recversiveCulcMaxMinYLayer(child);\n                    }\n                }\n\n            }\n        }\n        else {\n            if(this.maxYLayer < sugar.getYLayer()) this.maxYLayer = sugar.getYLayer();\n            if(this.minYLayer > sugar.getYLayer()) this.minYLayer = sugar.getYLayer();\n        }\n        if(this.maxYLayer < sugar.getYLayer()) this.maxYLayer = sugar.getYLayer();\n        if(this.minYLayer > sugar.getYLayer()) this.minYLayer = sugar.getYLayer();\n    }\n\n\n\n\n}\n\nexport { Glycan };","//@flow\n\"use strict\";\n\nimport { Edge } from \"./Edge\";\nimport { Sugar } from \"./Sugar\";\nimport { getColor } from \"../data/getColor\";\n\nclass Glycobond extends Edge {\n    childPosition: string;  //子Nodeの結合位置(未定義の場合\"undefined\")\n    childSugar: Sugar;\n    childAnomeric: string;\n    parentId: number;\n    svgLineShape: string;\n    svgTextShape: string;\n    svgChildPosition: Array<number>;\n    svgParentPosition: Array<number>;\n    jsonParentId: string;\n    jsonChildId: string;\n    minParentPosition: number;\n\n\n    constructor() {\n        super();\n        this.childAnomeric = \"undefined\";\n        this.childPosition = \"undefined\";\n        this.parentId = -1;\n        this.svgLineShape = \"\";\n        this.svgTextShape = \"\";\n        this.svgChildPosition = [];\n        this.svgParentPosition = [];\n        this.jsonParentId = \"\";\n        this.jsonChildId = \"\";\n    }\n\n\n    hasChildPosition(): boolean {\n        if (this.childPosition === \"undefined\") return false;\n        else return true;\n    }\n\n    getChildPosition(): string {\n        return this.childPosition;\n    }\n\n    setChildPosition(childPosition: string) {\n        this.childPosition = childPosition;\n        return;\n    }\n\n    hasChildAnomeric(): boolean {\n        if (this.childAnomeric === \"undefined\") return false;\n        else return true;\n    }\n\n    setChildAnomeric(anomeric: string) {\n        this.childAnomeric = anomeric;\n        return;\n    }\n\n    getChildAnomeric(): string {\n        return this.childAnomeric;\n    }\n\n    hasChildSugar(): boolean {\n        if (this.childSugar === {}) return false;\n        else return true;\n    }\n    setChildSugar(sugar: Sugar) {\n        this.childSugar = sugar;\n        return;\n    }\n    getChildSugar(): Sugar {\n        return this.childSugar;\n    }\n\n    highLight() {\n        this.children[0].graphics._stroke.style = getColor(\"red\");\n        this.children[0].alpha = 0.5;\n    }\n    offLight() {\n        this.children[0].graphics._stroke.style = getColor(\"black\");\n        this.children[0].alpha = 1.0;\n    }\n\n    checkYCoordinate(): boolean {\n        if(this.children[0].graphics._activeInstructions[0].y ===  this.children[0].graphics._activeInstructions[1].y) return true;\n        else return false;\n    }\n\n    setParentId(id: number) {\n        this.parentId = id;\n    }\n    getParentId(): number {\n        return this.parentId;\n    }\n    hasParentid(): boolean {\n        if(this.parentId === -1) return false;\n        else return true;\n    }\n\n    setSvgLineShape(svg: string) {\n        this.svgLineShape = svg;\n    }\n    getSvgLineShape(): string{\n        return this.svgLineShape;\n    }\n    setSvgTextShape(svg: string) {\n        this.svgTextShape = svg;\n    }\n    getSvgTextShape(): string{\n        return this.svgTextShape;\n    }\n    getSvgParentPosition(): Array<number> {\n        return this.svgParentPosition;\n    }\n    hasSvgParentPosition(): boolean {\n        if(this.getSvgParentPosition().length === 0) return false;\n        return true;\n    }\n    hasSvgChildPosition(): boolean {\n        if(this.getSvgChildPosition().length === 0) return false;\n        return true;\n    }\n    getSvgChildPosition(): Array<number> {\n        return this.svgChildPosition;\n    }\n    culcMinParentPosition(){\n        let num: number = 200;\n        for(let posi: number of this.svgParentPosition) {\n            if(num > posi) {\n                num = posi;\n            }\n        }\n        this.minParentPosition = num;\n    }\n\n\n\n}\n\nexport { Glycobond };","//@flow\n\"use strict\";\n\nimport { Node } from \"./Node\";\nimport { Modificationbond } from \"./Modificationbond\";\n\nclass Modification extends Node {\n    name: string;  //名前\n    modificationBond: Modificationbond;\n    childCommaShape: Object;\n\n    constructor(){\n        super();\n        this.name = \"\";\n        this.modificationBond;\n        this.childCommaShape = {};\n    }\n\n    setName(name: string) {\n        this.name = name;\n    }\n    getName(): string {\n        return this.name;\n    }\n    setModificationBond(position: Modificationbond) {\n        this.modificationBond = position;\n    }\n    getModificationBond(): Modificationbond {\n        return this.modificationBond;\n    }\n\n    isChildCommaShapeEmpty(): boolean {\n        return !Object.keys(this.childCommaShape).length;\n    }\n\n}\n\nexport { Modification };","//@flow\n\"use strict\";\n\nimport { Edge } from \"./Edge\";\n\nclass Modificationbond extends Edge {\n    name: string;  //修飾の結合の名前\n    parentSugarPosition: number;  //親単糖の結合場所\n\n    constructor(){\n        super();\n        this.parentSugarPosition = NaN;\n    }\n\n    hasParentPosition(): boolean {\n        if (isNaN(this.parentSugarPosition)) return false;\n        else return true;\n    }\n\n    getParentSugarPosition(): number {\n        return this.parentSugarPosition;\n    }\n\n    setParentSugarPosition(parentPosition: number) {\n        this.parentSugarPosition = parentPosition;\n        return;\n    }\n\n}\n\nexport { Modificationbond };","//@flow\n\"use strict\";\n\nimport { Node } from \"./Node\";\nimport { MultipleModificationBind } from \"./MultipleModificationBind\";\n\nexport class MultipleModification extends Node {\n    name: string;\n    MultipleBind: Object;\n    childCommaShape: Object;\n    fuzzy: boolean;\n\n    constructor(){\n        super();\n        this.name = \"\";\n        this.MultipleBind = {};\n        this.childCommaShape = {};\n        this.fuzzy = false;\n    }\n\n    setName(name: string) {\n        this.name = name;\n    }\n    getName(): string {\n        return this.name;\n    }\n    setMultipleBind(position: MultipleModificationBind) {\n        this.MultipleBind = (position);\n    }\n    getMultipleBind(): MultipleModificationBind {\n        return this.MultipleBind;\n    }\n    isChildCommaShapeEmpty(): boolean {\n        return !Object.keys(this.childCommaShape).length;\n    }\n}","//@flow\n\"use strict\";\n\nimport { Edge } from \"./Edge\";\n\nexport class MultipleModificationBind extends Edge {\n    name: string;  //修飾の結合の名前\n    parentSugarPosition: Array<number>;  //親単糖の結合場所\n\n    constructor(){\n        super();\n        this.parentSugarPosition = [];\n    }\n\n    hasParentPosition(): boolean {\n        if (this.parentSugarPosition.length === 0) return false;\n        else return true;\n    }\n\n    getParentSugarPosition(): Array<number> {\n        return this.parentSugarPosition;\n    }\n\n    setParentSugarPosition(parentPosition: number) {\n        this.parentSugarPosition.push(parentPosition);\n        return;\n    }\n\n}","//@flow\n\"use strict\";\n\nimport { VisibleElement } from \"./VisibleElement\";\nimport { Sugar } from \"./Sugar\";\nimport { Glycobond } from \"./Glycobond\";\n\nclass Node extends VisibleElement {\n    // parentSugars: Array<Sugar>;  //親のリスト。単糖\n    childNodes: Array<Node>;  //子供のリスト。単糖と修飾\n    // childSugars: Array<Sugar>;  //子供のリスト。単糖\n    // childModifications: Array<Modification>;  //子供のリスト。修飾\n    parentBonds: Array<Object>;  //親の単糖との結合\n\n    constructor(){\n        super();\n        this.parentSugars = [];\n        this.childNodes = [];\n        this.childSugars = [];\n        this.parentBonds = [];\n    }\n\n    hasParentSugars(): boolean{\n        if (this.parentSugars.length != 0) return true;\n        else return false;\n    }\n\n    getParentSugars(): Array<Sugar>{\n        return this.parentSugars;\n    }\n\n    setParentSugars(sugar: Sugar) {\n        this.parentSugars.push(sugar);\n        return;\n    }\n\n    hasChildSugars(): boolean{\n        if (this.childSugars.length != 0) return true;\n        else return false;\n    }\n    sortChildSugar() {\n        let sortedList: Array<Sugar> = [];\n        if(this.getChildSugars().length === 1) {\n            return;\n        }\n        let bindList: Array<Glycobond> = [];\n        for(let child: Sugar of this.getChildSugars()) {\n            for(let bind: Glycobond of child.getParentBond()) {\n                if(bind.getParentSugar() === this) {\n                    bindList.push(bind);\n                }\n            }\n        }\n        for(let bind: Glycobond of bindList) {\n            bind.culcMinParentPosition();\n        }\n        bindList.sort(function(a, b){\n            if(Number(a.minParentPosition) > Number(b.minParentPosition)) return -1;\n            if(Number(a.minParentPosition) < Number(b.minParentPosition)) return 1;\n            return 0;\n        });\n        for(let bind: Glycobond of bindList) {\n            for(let child: Sugar of this.getChildSugars()) {\n                for(let cbind: Glycobond of child.getParentBond()) {\n                    if(cbind === bind) {\n                        sortedList.push(child);\n                    }\n                }\n            }\n        }\n        this.childSugars = sortedList;\n    }\n\n    getChildNodes(): Array<Node> {\n        return this.childNodes;\n    }\n\n    setChildNodes(node: Node) {\n        this.childNodes.push(node);\n        return;\n    }\n\n    // hasChildSugars(): boolean{\n    //     if (this.childSugars.length != 0) return true;\n    //     else return false;\n    // }\n\n    getChildSugars(): Array<Sugar> {\n        return this.childSugars;\n    }\n\n    setChildSugars(sugar: Sugar) {\n        this.childSugars.push(sugar);\n        return;\n    }\n\n    getParentBond(): Array<Glycobond> {\n        return this.parentBonds;\n    }\n\n    setParentBond(edge: Glycobond) {\n        this.parentBonds.push(edge);\n        return;\n    }\n    hasParentBond(): boolean {\n        if(this.parentBonds.length === 0) return false;\n        else return true;\n    }\n    checkDrawingParentBond(parentSugar: Sugar): Object {\n        for (let parentBond: Glycobond of this.parentBonds) {\n            if(parentBond.getParentSugar() === parentSugar) {\n                return parentBond;\n            }\n            else return {};\n        }\n        return {};\n    }\n}\n\nexport { Node };","//@flow\n\"use strict\";\n\nimport { Glycan } from \"../Glycan\";\nimport { JSONKeys } from \"../../data/JSONKeys\";\nimport { check_monosaccharides } from \"../../jsonParser/check/checkMonosaccharides\";\nimport {check_fragment} from \"../../jsonParser/check/checkFragment\";\nimport {check_repeat} from \"../../jsonParser/check/checkRepeat\";\nimport {check_edge} from \"../../jsonParser/check/checkEdge\";\nimport { check_bridge } from \"../../jsonParser/check/checkBridge\";\nimport { assignMain } from \"../../jsonParser/assignDataStructure/assignMain\";\n\nexport class JSONParser {\n    json: Object;\n    glycan: Glycan;\n    monosaccharides: Array<Object>;\n    subfragments: Array<Object>;\n\n\n    constructor(text: Object) {\n        this.json = text;\n        this.glycan = new Glycan;\n        this.monosaccharides = [];\n        this.subfragments = [];\n    }\n\n\n    //GlyTouCanで定義されたGlycanを表すJSONがチェックする、定義に外れたものであった場合falseを返す\n    checkJson(): boolean {\n        let MONOSACCHARIDES_FLAG: boolean = false;\n        let FRAGMENTS_FLAG: boolean = false;\n        let REPEAT_FLAG: boolean = false;\n        let EDGES_FLAG: boolean = false;\n        let BRIDGE_FLAG: boolean = false;\n        for(let key: string of Object.keys(this.json)) {\n            switch (key.toLowerCase()) {\n                case JSONKeys.Monosaccharides.toLowerCase(): {\n                    MONOSACCHARIDES_FLAG = check_monosaccharides(this.json[key]);\n                    break;\n                }\n                case JSONKeys.Fragments.toLowerCase(): {\n                    FRAGMENTS_FLAG = check_fragment(this.json[key]);\n                    break;\n                }\n                case JSONKeys.Repeat.toLowerCase(): {\n                    REPEAT_FLAG = check_repeat(this.json[key]);\n                    break;\n                }\n                case JSONKeys.Edges.toLowerCase(): {\n                    EDGES_FLAG = check_edge(this.json[key]);\n                    break;\n                }\n                case JSONKeys.Bridge.toLowerCase(): {\n                    BRIDGE_FLAG = check_bridge(this.json[key]);\n                    break;\n                }\n                default:\n                    // alert(\"this json is error!\");\n                    // return false;\n                    continue;\n            }\n        }\n        if (MONOSACCHARIDES_FLAG && FRAGMENTS_FLAG && REPEAT_FLAG && EDGES_FLAG && BRIDGE_FLAG) return true;\n        else {\n            alert(\"this json is error!\");\n            return false;\n        }\n    }\n\n    assignData(): Array<Glycan> {\n        return assignMain(this.json);\n    }\n\n    // setData(): Glycan{\n    //     let keys: Array<string> = Object.keys(this.json);\n    //     let glycan: Object = {};\n    //     for(let key: string of keys ){\n    //         switch(key.toLowerCase()) {\n    //             case JSONKeys.Monosaccharides.toLowerCase(): {\n    //                 glycan = set_monosaccharides(this.json[key]);\n    //                 break;\n    //             }\n    //             default: break;\n    //         }\n    //     }\n    //     return glycan;\n    // }\n}\n\n","//@flow\n\"use strict\";\n\nimport { ParserFragmentEdge } from \"./ParserFragmentEdge\";\nimport {Sugar} from \"../Sugar\";\n\nexport class ParserFragments{\n    Acceptor: Array<string>;\n    Donor: string;\n    Edge: ParserFragmentEdge;\n    ParentIsGlycan: boolean;\n\n    constructor(){\n        this.Acceptor = [];\n        this.Donor = \"\";\n        this.Edge = new ParserFragmentEdge();\n        this.ParentIsGlycan = true;\n    }\n\n    setAcceptor(ac: string) {\n        this.Acceptor.push(ac);\n    }\n    getAcceptor(): Array<string> {\n        return this.Acceptor;\n    }\n    setDonor(donor: string) {\n        this.Donor = donor;\n    }\n    getDonor(): string {\n        return this.Donor;\n    }\n    setEdge(edge: ParserFragmentEdge) {\n        this.Edge = edge;\n    }\n    getEdge(): ParserFragmentEdge {\n        return this.Edge;\n    }\n    getParentIsGlycan(): boolean {\n        return this.ParentIsGlycan;\n    }\n\n    checkParent(nonReductionObj: Object, monosaccharideObj: Object) {\n        for(let nonReduArray in nonReductionObj) {\n            let flag2: boolean = true;\n            for(let sugar of nonReduArray) {\n                let flag: boolean = false;\n                for(let sugarId: string of this.Acceptor){\n                    if(sugar === monosaccharideObj[sugarId]) {\n                        flag = true;\n                        break;\n                    }\n                    else continue;\n                }\n                if(flag) {\n                    continue;\n                }\n                else {\n                    flag2 = false;\n                    break;\n                }\n            }\n            if(flag2) {\n                this.ParentIsGlycan = true;\n                break;\n            }\n            else {\n                continue;\n            }\n        }\n    }\n}\n\nconst recuversiveCheckGlycan = (sugar: Sugar, parentArray: Array<Sugar>): Array<Sugar> => {\n    if(sugar.hasChildSugars()) {\n        if(sugar.isChildCyclicEmpty()) {\n            for(let child: Sugar of sugar.getChildSugars()) {\n                parentArray = recuversiveCheckGlycan(child, parentArray);\n            }\n        }\n        else {\n            for(let child: Sugar of sugar.getChildSugars()) {\n                if(sugar.getChildCyclic().getReductionSugar() === child) continue;\n                else parentArray = recuversiveCheckGlycan(child, parentArray);\n            }\n        }\n    }\n    else {\n        parentArray.push(sugar);\n        return parentArray;\n    }\n    return parentArray;\n\n};\n","//@flow\n\"use strict\";\n\nimport {JSONKeys} from \"../../data/JSONKeys\";\nimport { Glycobond } from \"../Glycobond\";\n\nexport class ParserBinding{\n    Acceptor: string;\n    Donor: string;\n    Position: Object;\n    parentSide: Array<number>;\n    childSide: Array<number>;\n    constructor() {\n        this.Acceptor = \"\";\n        this.Donor = \"\";\n        this.Position = {};\n        this.parentSide = [];\n        this.childSide = [];\n    }\n\n    setAcceptor(ac: string) {\n        this.Acceptor = ac;\n    }\n    getAcceptor(): string {\n        return this.Acceptor;\n    }\n\n    setDonor(don: string) {\n        this.Donor = don;\n    }\n    getDonor(): string {\n        return this.Donor;\n    }\n\n    setPosition(posi: Object) {\n        this.Position = posi;\n    }\n    getPosition(): Object {\n        return this.Position;\n    }\n\n    checkWhichSide() {\n        for(let key: string of Object.keys(this.Position)) {\n            switch(key.toLowerCase()) {\n                case JSONKeys.Acceptor.toLowerCase(): {\n                    this.parentSide = this.Position[key];\n                    break;\n                }\n                case JSONKeys.Donor.toLowerCase(): {\n                    this.childSide = this.Position[key];\n                    break;\n                }\n            }\n        }\n    }\n\n    createGlycoBond(): Glycobond {\n        let bind: Glycobond = new Glycobond();\n        bind.svgChildPosition = this.childSide;\n        bind.svgParentPosition = this.parentSide;\n        bind.jsonParentId = this.Acceptor;\n        bind.jsonChildId = this.Donor;\n        return bind;\n    }\n}","//@flow\n\"use strict\";\n\nimport { modifiData } from \"../../data/modificationData\";\n\nexport class ParserBridge {\n    Acceptor: string;\n    Donor: string;\n    Notation: string;\n    dataNoatation: string;\n\n    constructor(){\n        this.Acceptor = \"\";\n        this.Donor = \"\";\n        this.Notation = \"\";\n        this.dataNoatation = \"Undefined\";\n    }\n\n    setAcceptor(ac: string) {\n        this.Acceptor = ac;\n    }\n    getAcceptor(): string {\n        return this.Acceptor;\n    }\n    setDonor(donor: string) {\n        this.Donor = donor;\n    }\n    getDonor(): string {\n        return this.Donor;\n    }\n    setNotation(no: string) {\n        this.Notation = no;\n    }\n    getNotation(): string {\n        return this.Notation;\n    }\n\n    checkNoatation() {\n        for(let key: string of Object.keys(modifiData)) {\n            if(key.toLowerCase() === this.getNotation().toLowerCase()) {\n                this.dataNoatation = key;\n            }\n        }\n    }\n}","//@flow\n\"use strict\";\n\nimport { ParserBinding } from \"./ParserBinding\";\n\nexport class ParserFragmentEdge extends ParserBinding {\n\n    constructor() {\n        super()\n    }\n\n}","//@flow\n\"use strict\";\n\nimport { SNFGSymbolGlycan } from \"../../data/SNFGGlycanTable\";\nimport {Sugar} from \"../Sugar\";\nimport {UndefSugar} from \"../UndefSugar\";\nimport { greekNumber } from \"../../data/greekNumber\";\nimport {Modification} from \"../Modification\";\nimport {Modificationbond} from \"../Modificationbond\";\nimport {JSONKeys} from \"../../data/JSONKeys\";\nimport {MultipleModification} from \"../MultipleModification\";\nimport {MultipleModificationBind} from \"../MultipleModificationBind\";\nimport { modifiData } from \"../../data/modificationData\";\n\nexport class ParserMonosaccharide {\n    Modifications: Array<Object>;\n    TrivialName: Array<string>;\n    Substituents: Array<Object>;\n    Configuration: Array<string>;\n    SuperClass: string;\n    RingSize: string;\n    AnomState: string;\n    AnomPosition: string;\n    Notation: string;\n\n    constructor() {\n        this.Modifications = [];\n        this.TrivialName = [];\n        this.Substituents = [];\n        this.Configuration = [];\n        this.SuperClass = \"\";\n        this.RingSize = \"\";\n        this.AnomState = \"\";\n        this.AnomPosition = \"\";\n        this.Notation = \"\";\n    }\n\n    setModifications(modification: Object) {\n        this.Modifications.push(modification);\n    }\n    getModifications(): Array<Object> {\n        return this.Modifications;\n    }\n    setTrivialName(trivialName: string) {\n        this.TrivialName.push(trivialName);\n    }\n    getTrivialName(): Array<string> {\n        return this.TrivialName;\n    }\n    setSubstituents(substituents: Object) {\n        this.Substituents.push(substituents);\n    }\n    getSubstituents(): Array<Object> {\n        return this.Substituents;\n    }\n    setConfiguration(config: string) {\n        this.Configuration.push(config);\n    }\n    getConfigutation(): Array<string> {\n        return this.Configuration;\n    }\n    setSuperClass(sClass: string) {\n        this.SuperClass = sClass;\n    }\n    getSuperClass(): string {\n        return this.SuperClass;\n    }\n    setRingSize(size: string) {\n        this.RingSize = size;\n    }\n    getRingSize(): string {\n        return this.RingSize;\n    }\n    setAnomState(anom: string) {\n        this.AnomState = anom;\n    }\n    getAnomState(): string {\n        return this.AnomState;\n    }setAnomPosition(anom: string) {\n        this.AnomPosition = anom;\n    }\n    getAnomPosition(): string {\n        return this.AnomPosition;\n    }setNotation(notation: string) {\n        this.Notation = notation;\n    }\n    getNotation(): string {\n        return this.Notation;\n    }\n\n    checkSNFGNoatation(): Sugar {\n        let config: string = \"\";\n        for(let con: string of this.Configuration) {\n            config += con;\n        }\n        let ring: string = \"\";\n        switch (this.RingSize.toLowerCase()) {\n            case \"p\": { ring = \"pyranose\"; break; }\n            case \"f\": { ring = \"furanose\"; break; }\n            default: { ring = \"undefined\"; break; }\n        }\n        let notation: string = this.Notation;\n        let superClass: string = this.SuperClass;\n        let SNFGKeys: Array<string> = Object.keys(SNFGSymbolGlycan);\n        let CONFIG_FLAG: boolean = false;\n        let RING_FLAG: boolean = false;\n        let NOTATION_FLAG: boolean = false;\n        let SNKey: string = \"\";\n        let SUGAR_FLAG: boolean = false;\n        let sugar: Sugar = new Sugar(\"\");\n        for (let key: string of SNFGKeys) {\n            if(key.toLowerCase() === notation.toLowerCase()) {\n                NOTATION_FLAG = true;\n                SNKey = key;\n                if (SNFGSymbolGlycan[key].isomer.toLowerCase() === config.toLowerCase()) CONFIG_FLAG = true;\n                if (SNFGSymbolGlycan[key].ring.toLowerCase() === ring.toLowerCase()) RING_FLAG = true;\n                if (NOTATION_FLAG && CONFIG_FLAG && RING_FLAG) {\n                    sugar.changeName(key);\n                    sugar.setIsomer(SNFGSymbolGlycan[key].isomer);\n                    sugar.setRing(SNFGSymbolGlycan[key].ring);\n                    SUGAR_FLAG = true;\n                }\n            }\n            else continue;\n        }\n        if(!SUGAR_FLAG) {\n            if(NOTATION_FLAG) sugar = new UndefSugar(SNKey);\n            else sugar = new UndefSugar(notation);\n            if(CONFIG_FLAG) sugar.setIsomer(SNFGSymbolGlycan[SNKey].isomer);\n            else sugar.setIsomer(config);\n            if(RING_FLAG) sugar.setRing(SNFGSymbolGlycan[SNKey].ring);\n            else sugar.setRing(ring);\n        }\n\n        for(let key: string of Object.keys(greekNumber)) {\n            if(key.toLowerCase() === superClass.toLowerCase()) sugar.setCarbBone(greekNumber[key]);\n        }\n        return sugar;\n    }\n\n    checkModificaiton(sugar: Sugar){\n        let modifications: Array<Object> = this.Modifications;\n        for(let modification: Object of modifications) {\n            let mody: Modification = new Modification();\n            let modyBond: Modificationbond = new Modificationbond();\n            let keys: Array<string> = Object.keys(modification);\n            let position_key: string = \"\";\n            let notation_key: string = \"\";\n            for(let key: string of keys) {\n                switch(key.toLowerCase()) {\n                    case JSONKeys.Position.toLowerCase(): {\n                        position_key = key;\n                        break;\n                    }\n                    case JSONKeys.Notation.toLowerCase(): {\n                        notation_key = key;\n                        break;\n                    }\n                }\n            }\n            if(modification[position_key].length === 1) {\n                let notation: string = compareModifiData(modification[notation_key]);\n                if(notation === \"Undefined\") {\n                    mody.setName(modification[notation_key]);\n                }\n                else {\n                    mody.setName(notation);\n                }\n                modyBond.setParentSugarPosition(modification[position_key][0]);\n                mody.setModificationBond(modyBond);\n            }\n            else {\n                mody = new MultipleModification();\n                modyBond = new MultipleModificationBind();\n                let notation: string = compareModifiData(modification[notation_key]);\n                if(notation === \"Undefined\") {\n                    mody.setName(modification[notation_key]);\n                }\n                else {\n                    mody.setName(notation);\n                }\n                modyBond.parentSugarPosition = modification[position_key];\n                mody.setMultipleBind(modyBond);\n            }\n            mody.setParentSugars(sugar);\n            sugar.setChildModifications(mody);\n        }\n    }\n\n    checkSubstituents(sugar: Sugar){\n        let substituents: Array<Object> = this.Substituents;\n        for(let substituent: Object of substituents) {\n            let keys: Array<string> = Object.keys(substituent);\n            let position_key: string = \"\";\n            let status_key: string = \"\";\n            let notation_key: string = \"\";\n            let accepter_key: string = \"\";\n            let mody: Modification = new Modification();\n            let modyBond: Modificationbond = new Modificationbond();\n            for(let key: string of keys) {\n                switch(key.toLowerCase()) {\n                    case JSONKeys.Position.toLowerCase(): {\n                        position_key = key;\n                        for(let positionKey: string of Object.keys(substituent[key])) {\n                            if (positionKey.toLowerCase() === JSONKeys.Acceptor.toLowerCase()) accepter_key = positionKey;\n                        }\n                        break;\n                    }\n                    case JSONKeys.Status.toLowerCase(): {\n                        status_key = key;\n                        break;\n                    }\n                    case JSONKeys.Notation.toLowerCase(): {\n                        notation_key = key;\n                        break;\n                    }\n                    default: continue;\n                }\n            }\n            if(substituent[position_key][accepter_key].length === 1) {\n                let notation: string = compareModifiData(substituent[notation_key]);\n                if(notation === \"Undefined\") {\n                    mody.setName(substituent[notation_key]);\n                }\n                else {\n                    mody.setName(notation);\n                }\n                modyBond.setParentSugarPosition(substituent[position_key][accepter_key][0]);\n                mody.setModificationBond(modyBond);\n            }\n            else {\n                mody = new MultipleModification();\n                modyBond = new MultipleModificationBind();\n                if(substituent[status_key] === \"simple\") mody.fuzzy = false;\n                else if(substituent[status_key] === \"fuzzy\") mody.fuzzy = true;\n                let notation: string = compareModifiData(substituent[notation_key]);\n                if(notation === \"Undefined\") {\n                    mody.setName(substituent[notation_key]);\n                }\n                else {\n                    mody.setName(notation);\n                }\n                modyBond.parentSugarPosition = substituent[position_key];\n                mody.setMultipleBind(modyBond);\n            }\n            mody.setParentSugars(sugar);\n            sugar.setChildModifications(mody);\n        }\n    }\n    checkAnome(sugar: Sugar) {\n        switch(this.AnomState.toLowerCase()) {\n            case \"a\":\n            case \"alpha\":\n            case \"α\":\n                sugar.setAnomeric(\"α\"); break;\n            case \"b\":\n            case \"beta\":\n            case \"β\":\n                sugar.setAnomeric(\"β\"); break;\n            default:\n                sugar.setAnomeric(\"?\");\n        }\n        sugar.setAnomeric(this.AnomState);\n    }\n}\n\nconst compareModifiData = (notation: string): string => {\n    for(let key: string of Object.keys(modifiData)) {\n        if(key.toLowerCase() === notation.toLowerCase()) {\n            return key;\n        }\n    }\n    return \"Undefined\";\n};\n\n","//@flow\n\"use strict\";\n\nexport class ParserRepeat{\n    Min: number;\n    Max: number;\n    Position: Object;\n    Start: string;\n    End: string;\n    numOfRepeat: string;\n\n    constructor() {\n        this.Min = NaN;\n        this.Max = NaN;\n        this.Position = {};\n        this.Start = \"\";\n        this.End = \"\";\n        this.numOfRepeat = \"\";\n    }\n\n    setMin(min: number ) {\n        this.Min = min;\n    }\n    getMin(): number {\n        return this.Min;\n    }\n    setMax(max: number) {\n        this.Max = max;\n    }\n    getMax(): number {\n        return this.Max;\n    }\n    setPosition(posi: Object) {\n        this.Position = posi;\n    }\n    getPosition(): Object {\n        return this.Position;\n    }\n    setStart(start: string) {\n        this.Start = start;\n    }\n    getStart(): string {\n        return this.Start;\n    }\n    setEnd(end: string) {\n        this.End = end;\n    }\n    getEnd(): string {\n        return this.End;\n    }\n\n    checkNumOfReapt() {\n        if(this.Min === -1 || this.Max === -1) {\n            this.numOfRepeat = \"n\";\n        }\n        else if (this.Min === 0 && this.Max === 0) {\n            this.numOfRepeat = \"childCyclic\";\n        }\n        else if(this.Min === this.Max){\n            this.numOfRepeat = String(this.Min);\n        }\n        else {\n            this.numOfRepeat = String(this.Min) + \"-\" + String(this.Max);\n        }\n    }\n\n}","//@flow\n\"use strict\";\n\nimport { Bracket } from \"./Bracket\";\nimport { Sugar } from \"./Sugar\";\n\n\nclass RepeatBracket extends Bracket {\n    endSugar: Sugar;  //リピートの最終単糖\n    startSugar: Sugar;  //リピートの最初の単糖\n    repeatNumber: string;\n\n    constructor(){\n        super();\n    }\n\n    getEndSugar(): Sugar {\n        return this.endSugar;\n    }\n\n    setEndSugar(sugar: Sugar) {\n        this.endSugar = sugar;\n        return;\n    }\n\n    getStartSugar(): Sugar {\n        return this.startSugar;\n    }\n\n    setStartSugar(sugar: Sugar) {\n        this.startSugar = sugar;\n        return;\n    }\n    setReepatNumber(num: string ) {\n        this.repeatNumber = num;\n    }\n    getRepeatNumber(): string {\n        return this.repeatNumber;\n    }\n\n}\n\nexport { RepeatBracket };","//@flow\n\"use strict\";\nimport { Node } from \"./Node\";\nimport { getColor } from \"../data/getColor\";\nimport { Glycan } from \"./Glycan\";\nimport { RepeatBracket } from \"./RepeatBracket\";\nimport { Cyclic } from \"./Cyclic\";\nimport { Modification } from \"./Modification\";\nimport { MultipleModification } from \"./MultipleModification\";\nimport { Bridge } from \"./Bridge\";\nimport { FragmentBracket } from \"./FragmentBracket\";\n\nclass Sugar extends Node{\n    name: string;  //単糖の名前\n    anomeric: string;  //アノマーの位置（\"alpha α a\" or \"beta β b\" or \"open o\" or \"undefined\"）\n    isomer: string;  //構造異性体(\"L\" or \"D\" or \"undefined\")\n    ring: string;  //フラノースかピラノースか(\"pyranose p\" or \"furanose f\" or \"undefined\")\n    glycan: Glycan;  //Sugarが所属するGlycanオブジェクト\n    repeatBracket: Object;  //繰り返しのstartNodeの時、Bracketを持つ\n    childCyclic: Object; //その糖鎖がCyclic構造を形成する単糖で、非還元末端側の場合\n    parentCyclic: Object;  //還元末端側が持つサイクリック\n    Xlayer: number;\n    YLayer: number;\n    childModifications: Array<Object>;\n    childMultipleBind: Array<Object>;\n    carbBone: number;\n    childBridge: Array<Object>;\n    fragmentBracket: Object;\n    svgXCoord: number;\n    svgYCoord: number;\n    svgShape: string;\n\n\n    constructor(name: string){\n        super();\n        this.name = name;\n        this.anomeric = \"undefined\";\n        this.isomer = \"undefined\";\n        this.ring = \"undefined\";\n        this.glycan;\n        this.childCyclic = {};\n        this.parentCyclic = {};\n        this.Xlayer = 0;\n        this.Ylayer = 0;\n        this.childModifications = [];\n        this.childMultipleBind = [];\n        this.carbBone = NaN;\n        this.repeatBracket = {};\n        this.childBridge =[];\n        this.fragmentBracket = {};\n        this.svgXCoord = -1;\n        this.svgYCoord = -1;\n        this.svgShape = \"\";\n    }\n\n\n    changeName(name: string) {\n        this.name = name;\n    }\n    getName(): string{\n        return this.name;\n    }\n\n    getAnomeric(): string {\n        return this.anomeric;\n    }\n\n    setAnomeric(anomeric: string) {\n        this.anomeric = anomeric;\n        return;\n    }\n\n    getIsomer(): string {\n        return this.isomer;\n    }\n\n    setIsomer(isomer: string) {\n        this.isomer = isomer;\n        return;\n    }\n\n    getRing(): string {\n        return this.ring;\n    }\n\n    setRing(ring: string) {\n        this.ring = ring;\n        return;\n    }\n\n\n    changeIsomerShape(isomer: string) {\n        this.isomerShape.text = isomer;\n    }\n\n\n    //ringの変更時、ringShapeの内容を変更する\n    changeRingSape(ring: string) {\n        this.ringShape.text = ring;\n    }\n\n    //nodeShpaのハイライト\n    highLight() {\n        this.children[0].alpha = 0.5;\n        this.children[0].graphics._stroke.style = getColor(\"red\");\n        liaise.stage.update();\n    }\n\n    //nodeShpaのオフライト\n    offLight() {\n        this.children[0].alpha = 1.0;\n        this.children[0].graphics._stroke.style  = getColor(\"black\");\n        liaise.stage.update();\n    }\n\n    //nodeがハイライトされているかを判別\n    checkHighLight(): boolean {\n        switch (this.children[0].alpha) {\n            case 0.5:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    //単糖の座標設定\n    setCoordinate(x: number, y: number) {\n        this.xCoord = x;\n        this.yCoord = y;\n        this.x = x;\n        this.y = y;\n    }\n\n    setGlycan(glycan: Glycan) {\n        this.glycan = glycan;\n        return;\n    }\n\n    setChildGlycan(sugar: Sugar) {\n        sugar.setGlycan(this.glycan);\n        if (sugar.hasChildSugars()) {\n            for(let child: Sugar of sugar.getChildSugars()) {\n                if(!sugar.isChildCyclicEmpty()) {\n                    if(child === sugar.getChildCyclic().getReductionSugar()){\n                        continue;\n                    }\n                }\n                this.setChildGlycan(child);\n            }\n            return;\n        }\n        else {\n            return;\n        }\n    }\n\n    getGlycan(): Glycan {\n        return this.glycan;\n    }\n\n    initGlycan() {\n        this.glycan = new Glycan();\n    }\n\n    setRepeatBracket(repeatBracket: RepeatBracket) {\n        this.repeatBracket = repeatBracket;\n        return;\n    }\n\n    getRepeatBracket(): RepeatBracket {\n        return this.repeatBracket;\n    }\n    isRepeatBracketEmpty(): boolean {\n        return !Object.keys(this.repeatBracket).length;\n    }\n    initRepeatBracket() {\n        this.repeatBracket = {};\n    }\n\n    setChildCyclic(cyclic: Cyclic) {\n        this.childCyclic = cyclic;\n        return;\n    }\n    getChildCyclic(): Cyclic {\n        return this.childCyclic;\n    }\n    isChildCyclicEmpty(): boolean {\n        return !Object.keys(this.childCyclic).length;\n    }\n    initChildCyclic() {\n        this.childCyclic = {};\n    }\n\n    setParentCyclic(cyclic: Cyclic) {\n        this.parentCyclic = cyclic;\n        return;\n    }\n    getParentCyclic(): Cyclic {\n        return this.parentCyclic;\n    }\n    isParentCyclicEmpty(): boolean {\n        return !Object.keys(this.parentCyclic).length;\n    }\n    initParentCyclic() {\n        this.parentCyclic = {};\n    }\n\n\n    setXLayer(layer: number) {\n        this.Xlayer = layer;\n        return;\n    }\n    getXLayer(): number {\n        return this.Xlayer;\n    }\n\n    setYLayer(layer: number) {\n        this.YLayer = layer;\n    }\n    getYLayer(): number {\n        return this.YLayer;\n    }\n\n    setChildModifications(modification: Modification) {\n        this.childModifications.push(modification);\n        return;\n    }\n    getChildModifications(): Array<Object> {\n        return this.childModifications;\n    }\n    hasChildModificaiton(): boolean {\n        if(this.childModifications.length === 0) return false;\n        else return true;\n    }\n\n    setChildMultipleBind(bridge: MultipleModification) {\n        this.childMultipleBind.push(bridge);\n        return;\n    }\n    getChildMultipleBind(): Array<Object> {\n        return this.childMultipleBind;\n    }\n    hasChildMultipleBind(): boolean {\n        if (this.childMultipleBind.length === 0) return false;\n        else return true;\n    }\n\n    setCarbBone(carbBone: number) {\n        this.carbBone = carbBone;\n    }\n\n    getCarbBode(): number {\n        return this.carbBone;\n    }\n\n    setChildBridge(bridge: Bridge) {\n        this.childBridge.push(bridge);\n    }\n    getChildBridge(): Array<Bridge> {\n        return this.childBridge;\n    }\n    hasChildBridge(): boolean {\n        if(this.childBridge.length !== 0) return true;\n        else return false;\n    }\n\n    setFragmentBracket(fragmentBracket: FragmentBracket) {\n        this.fragmentBracket = fragmentBracket;\n    }\n    getFragmentBracket(): FragmentBracket {\n        return this.fragmentBracket;\n    }\n    isFragmentBracketEmpty(): boolean {\n        return !Object.keys(this.fragmentBracket).length;\n    }\n\n    setSvgXCoord(coord: number) {\n        this.svgXCoord = coord;\n    }\n    getSvgXCoord(): number {\n        return this.svgXCoord;\n    }\n\n    setSvgYCoord(coord: number) {\n        this.svgYCoord = coord;\n    }\n    getSvgYCoord(): number {\n        return this.svgYCoord;\n    }\n\n    setSvgShape(svg: string) {\n        this.svgShape = svg;\n    }\n    getSvgShape(): string {\n        return this.svgShape;\n    }\n    addSvgShape(addString: string) {\n        this.svgShape += addString;\n    }\n\n\n\n\n}\n\nexport { Sugar };","//@flow\n\"use strict\";\n\nimport { Sugar } from \"./Sugar\";\nimport {getColor} from \"../data/getColor\";\nclass UndefSugar extends Sugar  {\n    constructor(name: string) {\n        super(name);\n    }\n\n    setCoordinate(x: number, y: number) {\n        this.x = x - this.children[1].getMeasuredWidth() / 2;\n        this.y = y - this.children[1].getMeasuredHeight() / 2;\n        this.xCoord = x;\n        this.yCoord = y;\n    }\n\n}\n\nexport { UndefSugar };","//@flow\n\"use strict\";\n\n\nclass VisibleElement {\n    xCoord: number;  //オブジェクトのx座標\n    yCoord: number;  //オブジェクトのy座標\n    constructor(){\n        this.xCoord = 0;\n        this.yCoord = 0;\n    }\n\n    getXCoord(): number {\n        return this.xCoord;\n    }\n\n    setXCoord(xCoord: number) {\n        this.x = xCoord;\n        this.xCoord = xCoord;\n        return;\n    }\n\n    getYCoord(): number {\n        return this.yCoord;\n    }\n\n    setYCoord(yCoord: number) {\n        this.y = yCoord;\n        this.yCoord = yCoord;\n        return;\n    }\n}\n\nexport { VisibleElement };\n\n","//@flow\n\"use strict\";\n\nimport {FragmentBracket} from \"../class/FragmentBracket\";\nimport {Sugar} from \"../class/Sugar\";\nimport { basicData } from \"../data/graphicsData\";\nimport {Fragment} from \"../class/Fragment\";\n\nexport const createSVGFragmentsBracket = (bracket: FragmentBracket) => {\n    let nonReductionSguars: Array<Sugar> = [];\n    let rootNodes: Array<Sugar> = [];\n    let bracketCoordObj: Object = {};\n    for(let fragment: Fragment of bracket.getChildGlycans()) {\n        rootNodes.push(fragment.getRootNode());\n    }\n    if(bracket.isEmptyParentGlycan()) {\n        nonReductionSguars = bracket.getParentSugars();\n        bracketCoordObj = culcMaxMinCoord(nonReductionSguars, rootNodes);\n    }\n    else {\n        nonReductionSguars = bracket.getParentGlycanNonReductionSguars();\n        bracketCoordObj = culcMaxMinCoord(nonReductionSguars, rootNodes);\n    }\n    bracket.setSVGShape(createSVG(bracketCoordObj));\n\n\n};\n\nconst createSVG = (bracketCoordObj: Object): string => {\n    let SVGShape: string = \"<path d = \\\"M \" + String(bracketCoordObj[\"top\"][0] + basicData.symbolSize * 1.5) + \" \" + String(bracketCoordObj[\"top\"][1] - basicData.symbolSize) + \" Q \" + String(bracketCoordObj[\"top\"][0]) + \" \" + String(bracketCoordObj[\"top\"][1] - basicData.symbolSize) + \" \" + String(bracketCoordObj[\"center\"][0]) + \" \" + String(bracketCoordObj[\"center\"][1] - basicData.symbolSize) + \" Q \" + String(bracketCoordObj[\"center\"][0]) + \" \" + String(bracketCoordObj[\"center\"][1]) + \" \" + String(bracketCoordObj[\"center\"][0] - basicData.symbolDistance / 2)  + \" \" + String(bracketCoordObj[\"center\"][1]) +\n        \" Q \" + String(bracketCoordObj[\"center\"][0]) + \" \" + String(bracketCoordObj[\"center\"][1]) + \" \" + String(bracketCoordObj[\"center\"][0]) + \" \" + String(bracketCoordObj[\"center\"][1] + basicData.symbolDistance / 1.5) + \" Q \" + String(bracketCoordObj[\"bottom\"][0]) + \" \" + String(bracketCoordObj[\"bottom\"][1] + basicData.symbolSize) +\n        \" \" + String(bracketCoordObj[\"bottom\"][0] + basicData.symbolSize * 1.5) + \" \" + String(bracketCoordObj[\"bottom\"][1]+ basicData.symbolSize) + \"\\\" stroke=\\\"black\\\" fill=\\\"none\\\" stroke-width=\\\"5\\\"/>\";\n    return SVGShape;\n};\n\nconst culcMaxMinCoord = (nonReductionSguars: Array<Sugar>, fragmentRootNodes): Object => {\n    let reduc_maxY: number = 0;\n    let reduc_minY: number = 100;\n    let root_maxY: number = 0;\n    let root_minY: number = 100;\n    let topY: number;\n    let bottomY: number;\n    let X: number;\n    for(let reduct: Sugar of nonReductionSguars) {\n        if(reduc_maxY < reduct.getSvgYCoord()) reduc_maxY = reduct.getSvgYCoord();\n        if(reduc_minY > reduct.getSvgYCoord()) reduc_minY = reduct.getSvgYCoord();\n    }\n    for(let fraRoot: Sugar of fragmentRootNodes) {\n        if(root_maxY < fraRoot.getSvgYCoord()) root_maxY = fraRoot.getSvgYCoord();\n        if(root_minY > fraRoot.getSvgYCoord()) root_minY = fraRoot.getSvgYCoord();\n    }\n    if((reduc_maxY - reduc_minY) > (root_maxY - root_minY)) {\n        topY = reduc_maxY;\n        bottomY = reduc_minY;\n    }\n    else {\n        topY = root_maxY;\n        bottomY = root_minY;\n    }\n    X = nonReductionSguars[0].getSvgXCoord() - fragmentRootNodes[0].getSvgXCoord();\n    let centerY: number = (topY + bottomY) / 2;\n    return {\"top\": [X, bottomY - basicData.symbolSize],\n        \"bottom\": [X, topY + basicData.symbolSize],\n        \"center\": [X, centerY]};\n};","//@flow\n\"use strict\";\n\nimport {Sugar} from \"../class/Sugar\";\nimport {Glycan} from \"../class/Glycan\";\nimport {FragmentBracket} from \"../class/FragmentBracket\";\nimport {Fragment} from \"../class/Fragment\";\nimport { recurversiveSortChildSugars } from \"./sortChildSugars\";\nimport { setXLayer } from \"./setXLayer\";\nimport { setYLayer } from \"./setYLayer\";\nimport {basicData} from \"../data/graphicsData\";\nimport {culc_max_min_layer} from \"../drawGlycan/culcMaxMinLayer\";\nimport {culc_each_sugar_coordinate} from \"./culcEachSugarCoordinate\";\nimport {createSVGShape} from \"./createSVGShape\";\nimport { createSVGFragmentsBracket } from \"./createSVGFragmetnBracket\";\n// import { createCyclicBind } from \"./createCyclicBind\";\nimport {Glycobond} from \"../class/Glycobond\";\n\nexport const createSVGMain = (glycanArray: Array<Glycan>): string => {\n    recurversiveSortChildSugars(glycanArray[0].getRootNode());\n    setXLayer(glycanArray);\n    let fragmentBrackets: Array<FragmentBracket> = setYLayer(glycanArray);\n    let normalDistace: number = basicData.symbolDistance + basicData.symbolSize * 2;\n    let maxMinLayer: Array<number> = culc_max_min_layer(glycanArray);\n    let viewBox: Array<number> = culcViewBox(maxMinLayer, normalDistace);\n    let resultSVGShape: string = \"<?xml version = \\\"1.0\\\"?><svg viewbox = \\\"\"+ String(viewBox[0])+ \" \" + String(viewBox[1]) + \" \" + String(viewBox[2]) + \" \" + String(viewBox[3]) + \"\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\";\n    for(let glycan: Glycan of glycanArray) {\n        if(glycan instanceof Fragment) {\n            culc_each_sugar_coordinate(glycan.getRootNode().getParentSugars()[0], maxMinLayer, normalDistace);\n        }\n        else {\n            culc_each_sugar_coordinate(glycan.getRootNode(), maxMinLayer, normalDistace);\n        }\n        recuversiveCreateSVgShapeImport(glycan.getRootNode());\n        resultSVGShape = bindLineSting(glycan.getRootNode(), resultSVGShape);\n        resultSVGShape = bindSvgString(glycan.getRootNode(), resultSVGShape);\n    }\n    for(let bracket: FragmentBracket of fragmentBrackets){\n        createSVGFragmentsBracket(bracket);\n        resultSVGShape += bracket.getSVGShape();\n    }\n\n\n    // resultSVGShape += \"</svg>\";\n    // console.log(resultSVGShape);\n    // downloadData(resultSVGShape);\n    resultSVGShape += \"</svg>\";\n    return resultSVGShape;\n\n\n};\n\nconst culcViewBox = (maxMinLayer: Array<number>, normalDistance: number): Array<number> => {\n    let viewBox: Array<number> = [0, 0];  //[x, y, 横の長さ, 縦の長さ]\n    viewBox.push((maxMinLayer[0] - maxMinLayer[1] + 1) * normalDistance);\n    viewBox.push((maxMinLayer[2] - maxMinLayer[3] + 1) * normalDistance);\n    return viewBox;\n};\n\nconst recuversiveCreateSVgShapeImport = (sugar: Sugar) => {\n    createSVGShape(sugar);\n    if(sugar.isChildCyclicEmpty()) {\n        for(let child: Sugar of sugar.getChildSugars()) {\n            recuversiveCreateSVgShapeImport(child);\n        }\n    }\n    else {\n        for(let child: Sugar of sugar.getChildSugars()) {\n            if(child === sugar.getChildCyclic().getReductionSugar()) {\n                for(let parentBind: Glycobond of child.getParentBond()) {\n                    if(parentBind.getParentSugar() === sugar) {\n                        // createCyclicBind(parentBind, sugar, child);\n                    }\n                }\n                continue;\n            }\n            recuversiveCreateSVgShapeImport(child);\n        }\n    }\n\n};\n\nconst bindLineSting = (sugar: Sugar, resultShape: string): string => {\n    if(sugar.hasParentBond()) {\n        resultShape += sugar.getParentBond()[0].getSvgLineShape() + sugar.getParentBond()[0].getSvgTextShape();\n    }\n    for(let child: Sugar of sugar.getChildSugars()) {\n        resultShape = bindLineSting(child, resultShape);\n    }\n    return resultShape;\n};\nconst bindSvgString = (sugar: Sugar, resultShape: string): string => {\n    resultShape += sugar.getSvgShape();\n    for(let child: Sugar of sugar.getChildSugars()) {\n        resultShape = bindSvgString(child, resultShape);\n    }\n    return resultShape;\n};\n\n\n\n","//@flow\n\"use strict\";\n\nimport { Sugar } from \"../class/Sugar\";\nimport { nodeModeSearch, nodeType, getSymbolColor} from \"../nodeModeSearch\";\nimport { basicData } from \"../data/graphicsData\";\nimport { nodeModeType } from \"../nodeModeType\";\nimport {getColor} from \"../data/getColor\";\nimport {Glycobond} from \"../class/Glycobond\";\n\nexport const createSVGShape = (sugar: Sugar) => {\n    let shapeSymbol: Symbol = nodeModeSearch(sugar.getName());\n    let shapeType: Symbol = nodeType(shapeSymbol);\n    sugar.setSvgShape(createSVGNodeSymbol(sugar, shapeType, shapeSymbol));\n    if(sugar.hasParentBond()) {\n        if(!sugar.getParentBond()[0].isEmptyParentSugar()) {\n            createParentBonSVGLineText(sugar.getParentBond()[0]);\n        }\n    }\n\n};\n\nconst createParentBonSVGLineText = (bind: Glycobond) => {\n    let anomeric: string = \"?\";\n    let parentPosition: string = \"?\";\n    let parentX: number = bind.getParentSugar().getSvgXCoord();\n    let parentY: number = bind.getParentSugar().getSvgYCoord();\n    let childX: number = bind.getChildSugar().getSvgXCoord();\n    let childY: number = bind.getChildSugar().getSvgYCoord();\n    if(bind.hasChildAnomeric()) anomeric = bind.getChildAnomeric();\n    if(bind.hasSvgParentPosition()){\n        parentPosition = \"\";\n        for(let parentPositionNum: number of bind.getSvgParentPosition()) {\n            parentPosition += String(parentPositionNum);\n        }\n    }\n    let lineText: string = \"<line stroke =\\\"black\\\" x1 = \\\"\" +parentX + \"\\\" y1 = \\\"\" + parentY + \"\\\" x2 = \\\"\" + childX+ \"\\\" y2 = \\\"\" + childY + \"\\\" nodeIndex=\\\"1\\\"></line>\";\n    let text: string = \"\";\n    if(parentY > childY) {\n        text = \"<text text-anchor = \\\"middle\\\" dominant-baseline = \\\"central\\\" x = \\\"\" + ((parentX + childX) / 2 + basicData.svgLinkageUp) + \"\\\" y = \\\"\" + ((parentY + childY) / 2 + basicData.svgLinkagedown) + \"\\\" >\" + anomeric + parentPosition + \"</text>\";\n    }\n    else if(parentY < childY){\n        text = \"<text text-anchor = \\\"middle\\\" dominant-baseline = \\\"central\\\" x = \\\"\" + ((parentX + childX) / 2 + basicData.svgLinkageUp) + \"\\\" y = \\\"\" + ((parentY + childY) / 2 + basicData.svgLinkageUp) + \"\\\" >\" + anomeric + parentPosition + \"</text>\";\n    }\n    else {\n        text = \"<text text-anchor = \\\"middle\\\" dominant-baseline = \\\"central\\\" x = \\\"\" + (parentX + childX) / 2 + \"\\\" y = \\\"\" + ((parentY + childY) / 2 + basicData.svgLinkagedown) + \"\\\" >\" + anomeric + parentPosition + \"</text>\";\n\n    }\n    bind.setSvgLineShape(lineText);\n    bind.setSvgTextShape(text);\n};\n\nconst createSVGNodeSymbol = (sugar: Sugar, shapeType: Symbol, shapeSymbol: Symbol): string => {\n    let color: string = getSymbolColor(shapeSymbol);\n    let subColor: string = getColor(\"white\");\n    let exColorShape: boolean = exColor(shapeSymbol);\n    if(exColorShape) {\n        let A: string = color;\n        color = subColor;\n        subColor = A;\n    }\n\n    let scale: number = basicData.symbolSize;\n    let width_size: number = 0.1;\n    let x: number = sugar.getSvgXCoord();\n    let y: number = sugar.getSvgYCoord();\n\n    if (shapeType === nodeModeType.HEXOSE) {\n        return \"<circle cx = \\\"\" + String(x) + \" \\\" cy = \\\" \" + String(y) + \"\\\" r = \\\" \" + String(scale) + \" \\\" stroke-width = \\\" \" + String(0.1 * scale) + \" \\\" stroke = \\\"black\\\" fill = \\\" \" + color + \" \\\"/>\";\n    }\n    else if (shapeType === nodeModeType.HEXNAC) {\n        return \"<rect x = \\\"\" + String(x - scale) + \"\\\" y = \\\"\" + String(y - scale) + \"\\\" width = \\\"\" + String(2 * scale) + \"\\\" height = \\\"\" + String(2 * scale) + \"\\\" stroke = \\\"black\\\" stroke-width = \\\"\" + String( 0.1 * scale ) + \"\\\" fill = \\\"\" + color + \"\\\"/>\";\n    }\n    else if (shapeType === nodeModeType.HEXOSAMINE) {\n        return \"<rect x = \\\"\" + String(x - scale)  + \"\\\" y = \\\"\" + String(y - scale)  + \"\\\" width = \\\"\" + String(2 * scale) + \"\\\" height = \\\"\" + String(2 * scale)  + \"\\\" stroke = \\\"black\\\" stroke-width = \\\"0\\\" fill = \\\"\" + getColor(\"white\") + \"\\\"/>\" +\n            \"<polygon points = \\\"\" + String(x - scale) + \",\" + String(y - scale) + \",\" + String(x + scale) + \",\" + String(y - scale) + \",\" + String(x + scale) + \",\" + String(y + scale) + \"\\\" stroke = \\\"black\\\" stroke-width = \\\"\" + String(width_size * scale) + \"\\\" fill = \\\"\" + color + \"\\\"/>\" +\n            \"<rect x = \\\"\" + String(x - scale) + \"\\\" y = \\\"\" + String(y - scale) + \"\\\" width = \\\"\" + String(2 * scale) + \"\\\" height = \\\"\" + String(2 * scale) + \"\\\" stroke = \\\"black\\\" stroke-width = \\\"\" + String(0.1 * scale) + \"\\\" fill = \\\"none\\\"/>\";\n    }\n    else if (shapeType === nodeModeType.HEXURONATE) {\n        return \"<polygon points =\\\"\" + String(x) + \",\" + String(y + scale) + \",\" + String(x + scale) + \",\" + String(y) + \",\" + String(x - scale) + \",\" + String(y) + \"\\\" stroke = \\\"black\\\" stroke-width = \\\"0\\\" fill = \\\"\" + subColor + \"\\\"/>\" +\n            \"<polygon points = \\\"\" + String(x) + \",\" + String(y - scale) + \",\" + String(x + scale) + \",\" + String(y) + \",\" + String(x - scale) + \",\" + String(y) + \"\\\" stroke = \\\"black\\\" stroke-width = \\\"0\\\" fill = \\\"\" + color + \"\\\"/>\" +\n            \"<polygon points = \\\"\" + String(x) + \",\" + String(y + scale) + \",\" + String(x + scale) + \",\" + String(y) + \",\" + String(x) + \",\" + String(y - scale) + \",\" + String(x - scale) + \",\" + String(y) + \"\\\" stroke = \\\"black\\\" stroke-width = \\\"\" + String(0.1 * scale) + \"\\\" fill = \\\"none\\\"/>\" +\n            \"<polygon points = \\\"\" + String(x - scale) + \",\" + String(y) + \",\" + String(x + scale) + \",\" + String(y) + \"\\\" stroke = \\\"black\\\" stroke-width = \\\"\" + String(0.1 * scale) + \"\\\" fill = \\\"none\\\"/>\";\n    }\n    else if (shapeType === nodeModeType.DEOXYHEXOSE){\n        return \"<polygon points = \\\"\" + String(x) + \",\" + String(y - scale) + \",\" + String(x - scale) + \",\" + String(y + scale) + \",\" + String(x + scale) + \",\" + String(y + scale) + \"\\\" stroke = \\\"black\\\" stroke-width = \\\"\" + String(0.1 * scale) + \"\\\" fill = \\\"\" + color + \"\\\"/>\";\n    }\n    else if (shapeType === nodeModeType.DEOXYHEXNAC){\n        return \"<polygon points = \\\"\" + String(x) + \",\" + String(y - scale) + \",\" + String(x - scale) + \",\" + String(y + scale) + \",\" + String(x + scale) + \",\" + String(y + scale) + \"\\\" stroke = \\\"black\\\" stroke-width = \\\"0\\\" fill = \\\"\" + getColor(\"white\") + \"\\\"/>\" +\n            \"<polygon points = \\\"\" + String(x) + \",\" + String(y - scale) + \",\" + String(x + scale) + \",\" + String(y + scale) + \",\" + String(x) + \",\" + String(y + scale) + \"\\\" stroke = \\\"black\\\" stroke-width = \\\"\" + String(width_size * scale) + \"\\\" fill = \\\"\" + color + \"\\\"/>\" +\n            \"<polygon points = \\\"\" + String(x) + \",\" + String(y - scale) + \",\" + String(x - scale) + \",\" + String(y + scale) + \",\" + String(x + scale) + \",\" + String(y + scale) + \"\\\" stroke = \\\"black\\\" stroke-width = \\\"\" + String(0.1 * scale) + \"\\\" fill = \\\"none\\\"/>\";\n    }\n    else if (shapeType === nodeModeType.DI_DEOXYHEXOSE) {\n        return \"<rect x = \\\"\" + String(x - scale) + \"\\\" y = \\\"\" + String(y - scale / 2) + \"\\\" width = \\\"\" + String(2 * scale) + \"\\\" height = \\\"\" + String(scale) + \"\\\" stroke = \\\"black\\\" stroke-width = \\\"\" + String(0.1 * scale) + \"\\\" fill = \\\"\" + color + \"\\\"/>\";\n    }\n    else if (shapeType === nodeModeType.PENTOSE) {\n        return \"<polygon points = \\\"\" + String(x) + \",\" + String(y - 0.7 * scale * 2) + \",\" + String(x - 0.205 * scale * 2) + \",\" + String(y - 0.283 * scale * 2) + \",\" + String(x - 0.665 * scale * 2) + \",\" + String(y - 0.216 * scale * 2) + \",\" + String(x - 0.332 * scale * 2) + \",\" + String(y + 0.108 * scale * 2) + \",\" + String(x - 0.411 * scale * 2) + \",\" + String(y + 0.566 * scale * 2) + \",\" + String(x) + \",\" + String(y + 0.35 * scale * 2) + \",\" + String(x + 0.411 * scale * 2) + \",\"+ String( y + 0.566 * scale * 2) + \",\"+ String(x + 0.332 * scale * 2) + \",\"+ String(y + 0.108 * scale * 2) + \",\"+ String(x + 0.665 * scale * 2) + \",\"+ String(y - 0.216 * scale * 2) + \",\"+ String(x + 0.205 * scale * 2) + \",\"+ String(y - 0.283 * scale * 2) + \"\\\" stroke = \\\"black\\\" stroke-width = \\\"\" + String(0.1 * scale) + \"\\\" fill = \\\"\" + color + \"\\\" />\";\n    }\n    else if (shapeType === nodeModeType.DEOXYNONULOSONATE) {\n        return \"<polygon points = \\\"\" + String(x) + \",\" + String(y + scale) + \",\" + String(x + scale) + \",\" + String(y) + \",\" + String(x) + \",\" + String(y - scale) + \",\" + String(x - scale) + \",\" + String(y) + \"\\\" stroke = \\\"black\\\" stroke-width = \\\"\" + String(0.1 * scale) + \"\\\" fill = \\\"\" + color + \"\\\"/>\";\n    }\n    else if (shapeType === nodeModeType.DI_DEOXYNONULOSONATE){\n        return \"<polygon points = \\\"\" + String(x) + \",\"+ String(y + 0.5* scale) + \",\"+ String(x +  scale) + \",\"+ String(y) + \",\"+ String(x) + \",\"+ String(y - 0.5 * scale) + \",\"+ String(x - scale) + \",\"+ String(y) + \"\\\" stroke = \\\"black\\\" stroke-width = \\\"\" + String(0.1 * scale) + \"\\\" fill = \\\"\" + color+ \"\\\"/>\";\n    }\n    else if (shapeType === nodeModeType.UNKNOWN) {\n        return \"<polygon points = \\\"\" + String(x - 0.8 * scale) + \",\" + String(y) + \",\" + String(x - 0.6 * scale) + \",\" + String(y - 0.5 * scale) + \",\" + String(x + 0.6 * scale) + \",\" + String(y - 0.5 * scale) + \",\" + String(x + 0.8 * scale) + \",\" + String(y) + \",\" + String(x + 0.6 * scale) + \",\" + String(y + 0.5 * scale) + \",\" + String(x - 0.6 * scale) + \",\" + String(y + 0.5 * scale) + \"\\\" stroke = \\\"black\\\" stroke-width = \\\"\" + String(0.1 * scale) + \"\\\" fill = \\\"\" + color + \"\\\"/>\";\n    }\n    else if (shapeType === nodeModeType.ASSIGNED) {\n        return \"<polygon points = \\\"\" + String(x) + \",\" + String(y - scale) + \",\" + String(x - 0.75 * scale) + \",\" + String(y - 0.25 * scale) + \",\" + String(x - 0.5 * scale) + \",\" + String(y + 0.75 * scale) + \",\" + String(x + 0.5 * scale) + \",\" + String(y + 0.75 * scale) + \",\" + String(x + 0.75 * scale) + \",\" + String(y - 0.25 * scale) + \"\\\" stroke = \\\"black\\\" stroke-width = \\\"\" + String(0.1 * scale) + \"\\\" fill = \\\"\" + color + \"\\\"/>\";\n    }\n    else {\n        return \"<text text-anchor = \\\"middle\\\" dominant-baseline = \\\"central\\\" x = \\\"\" + String(x / 2) + \"\\\" y = \\\"\" + String(y / 2 + basicData.svgLinkagedown) + \"\\\" >\" + sugar.getName() + \"</text>\";\n    }\n};\n\nconst exColor = (shapeSymbol: Symbol): boolean => {\n    switch(shapeSymbol) {\n        case nodeModeType.ALTA:\n        case nodeModeType.IDOA:\n            return true;\n        default: return false;\n    }\n};","//@flow\n\"use strict\";\n\nimport {Sugar} from \"../class/Sugar\";\nimport {getRelativeCoordinate} from \"../getRelativeCoordinate\";\nimport {basicData} from \"../data/graphicsData\";\n\nexport const culc_each_sugar_coordinate = (sugar: Sugar, maxMinLayer: Array<number>, normalDistance: number) => {\n    let XLayer: number = sugar.getXLayer();\n    let YLayer: number = (-1) * sugar.getYLayer();\n    let svgCoord: Array<number> = getRelativeCoordinate(((maxMinLayer[0] - XLayer) * normalDistance) + basicData.symbolSize, ((maxMinLayer[2] - YLayer) * normalDistance) + basicData.symbolSize);\n    sugar.setSvgXCoord(svgCoord[0]);\n    sugar.setSvgYCoord(svgCoord[1]);\n    if(sugar.isChildCyclicEmpty()) {\n        if(sugar.hasChildSugars()) {\n            for(let child: Sugar of sugar.getChildSugars()) {\n                culc_each_sugar_coordinate(child, maxMinLayer, normalDistance);\n            }\n        }\n    }\n    else {\n        if(sugar.hasChildSugars()) {\n            for (let child: Sugar of sugar.getChildSugars()) {\n                if (child === sugar.getChildCyclic().getReductionSugar()) {\n                    continue;\n                }\n                culc_each_sugar_coordinate(child, maxMinLayer, normalDistance);\n            }\n        }\n    }\n\n};","//@flow\n\"use strict\";\n\nimport {Sugar} from \"../class/Sugar\";\nimport {FragmentBracket} from \"../class/FragmentBracket\";\nimport {Fragment} from \"../class/Fragment\";\nimport {Glycan} from \"../class/Glycan\";\n\nexport const setXLayer = (glycanArray: Array<Glycan>) => {\n    for(let glycan: Glycan of glycanArray) {\n        recuversiveSetXLayer(glycan.getRootNode(), 0);\n    }\n    for(let glycan: Glycan of glycanArray) {\n        if(glycan instanceof Fragment) {\n            let fragmentBracket: FragmentBracket = glycan.getParentFragmentBracket();\n            if(fragmentBracket.isEmptyParentGlycan()) {\n                let parentSugars: Array<Sugar> = fragmentBracket.getParentSugars();\n                let maxX: number = parentSugars[0].getXLayer();\n                for(let sugar: Sugar of parentSugars) {\n                    if(maxX < sugar.getXLayer()) {\n                        maxX = sugar.getXLayer();\n                    }\n                }\n                glycan.culcPlucXLayer(maxX);\n            }\n            else {\n                glycan.culcPlucXLayer(fragmentBracket.getParentGlycan().getMaxXLayer());\n            }\n\n        }\n    }\n};\n\nconst recuversiveSetXLayer = (sugar: Sugar, layer: number) => {\n    sugar.setXLayer(layer);\n    sugar.getGlycan().setMaxXLayer(layer);\n    layer += 1;\n    if(sugar.hasChildSugars()) {\n        if(sugar.isChildCyclicEmpty()) {\n            for(let child: Sugar of sugar.getChildSugars()) {\n                recuversiveSetXLayer(child, layer);\n            }\n        }\n        else {\n            for(let child: Sugar of sugar.getChildSugars()) {\n                if(sugar.getChildCyclic().getReductionSugar() === child) continue;\n                else recuversiveSetXLayer(child, layer);\n            }\n        }\n    }\n    else {\n        return;\n    }\n};","//@flow\n\"use strict\";\n\nimport {Glycan} from \"../class/Glycan\";\nimport {Sugar} from \"../class/Sugar\";\nimport {Fragment} from \"../class/Fragment\";\nimport {FragmentBracket} from \"../class/FragmentBracket\";\n\nclass vSugar extends Sugar {\n    constructor(props) {\n        super(props);\n\n    }\n\n}\n\nexport const setYLayer = (glycanArray: Array<Glycan>): Array<FragmentBracket> => {\n    let fragmentBrackets: Array<FragmentBracket> = [];\n    let mainGlycan: Glycan = new Glycan();\n    for(let glycan: Glycan of glycanArray){\n        if(glycan instanceof Fragment) continue;\n        else {\n            fragmentBrackets = serchFragmentBracket(glycan, fragmentBrackets);\n            mainGlycan = glycan;\n        }\n    }\n    for(let bracket: FragmentBracket of fragmentBrackets) {\n        let vNode: vSugar = new vSugar(\"\");\n        let fragments: Array<Fragment> = bracket.getChildGlycans();\n        for(let fragment: Fragment of fragments) {\n            vNode.setChildSugars(fragment.getRootNode());\n            fragment.getRootNode().setParentSugars(vNode);\n        }\n        setEndFragmentYLayer(vNode, 0);\n    }\n    setEndFragmentYLayer(mainGlycan.getRootNode(), 0);\n    fragmentBrackets.reverse();\n    for(let bracket: FragmentBracket of fragmentBrackets) {\n        if(bracket.isEmptyParentGlycan()){\n            let parentSugars: Array<Sugar> = bracket.getParentSugars();\n            let minY: number = 100;\n            let maxY: number = 0;\n            for(let parentSugar: Sugar of parentSugars) {\n                if(minY > parentSugar.getYLayer()) minY = parentSugar.getYLayer();\n                if(maxY < parentSugar.getYLayer()) maxY = parentSugar.getYLayer();\n            }\n            let vNode: vSugar = bracket.getChildGlycans()[0].getRootNode().getParentSugars()[0];\n            let middleLayer: number = Math.floor((maxY + minY) / 2);\n            bracket.getChildGlycans()[0].culcPlucYLayer(vNode.getYLayer() - middleLayer + 1);\n\n        }\n        else {\n            let parentGlycan: Glycan = bracket.getParentGlycan();\n            parentGlycan.recversiveCulcMaxMinYLayer(parentGlycan.getRootNode());\n            let vNode: vSugar = bracket.getChildGlycans()[0].getRootNode().getParentSugars()[0];\n            let middleLayer: number = Math.floor((parentGlycan.maxXLayer + parentGlycan.minYLayer) / 2);\n            bracket.getChildGlycans()[0].culcPlucYLayer(vNode.getYLayer() - middleLayer + 1);\n        }\n    }\n    return fragmentBrackets.reverse();\n};\n\n\n\nconst serchFragmentBracket = (glycan: Glycan, fragmentBrackets: Array<FragmentBracket>): Array<FragmentBracket> => {\n    if(glycan.isFragmentBracketEmpty()) {\n        let nonReductionSugars: Array<Sugar> = [];\n        nonReductionSugars = recuversiveNonReductionSugar(glycan.getRootNode(), nonReductionSugars);\n        let counter: number = 0;\n        for(let reductionSugar: Sugar of nonReductionSugars) {\n            if(reductionSugar.isFragmentBracketEmpty()) {\n                counter += 1;\n            }\n            else{\n                counter += 1;\n                for(let fragment: Fragment of reductionSugar.getFragmentBracket().getChildGlycans()) {\n                    fragmentBrackets = serchFragmentBracket(fragment, fragmentBrackets);\n                }\n                let same_FLAG: boolean =false;\n                for(let fragmentBracket: FragmentBracket of fragmentBrackets) {\n                    if(fragmentBracket === glycan.getFragmentBracket()) {\n                        same_FLAG = true;\n                    }\n                }\n                if(!same_FLAG) {\n                    fragmentBrackets.push(glycan.getFragmentBracket());\n                }\n            }\n        }\n        if(counter === nonReductionSugars.length) {\n            return fragmentBrackets;\n        }\n    }\n    else {\n        for(let fragmentBracket: FragmentBracket of fragmentBrackets) {\n            if(fragmentBracket === glycan.getFragmentBracket()) {\n                return  fragmentBrackets;\n            }\n        }\n        for(let fragment: Fragment of glycan.getFragmentBracket().getChildGlycans()) {\n            fragmentBrackets = serchFragmentBracket(fragment, fragmentBrackets);\n        }\n        let same_FLAG: boolean = false;\n        for(let fragmentBracket: FragmentBracket of fragmentBrackets) {\n            if(fragmentBracket === glycan.getFragmentBracket()) {\n                same_FLAG = true;\n            }\n        }\n        if(!same_FLAG) {\n            fragmentBrackets.push(glycan.getFragmentBracket());\n        }\n        return fragmentBrackets;\n\n    }\n    return fragmentBrackets;\n};\n\nconst recuversiveNonReductionSugar = (sugar: Sugar, nonReductionSugars: Array<Sugar>): Array<Sugar> => {\n    if(sugar.hasChildSugars()) {\n        if(sugar.isChildCyclicEmpty()){\n            for(let child: Sugar of sugar.getChildSugars()) {\n                nonReductionSugars = recuversiveNonReductionSugar(child, nonReductionSugars);\n            }\n        }\n        else {\n            if(sugar.getChildSugars().length === 1) {\n                nonReductionSugars.push(sugar);\n            }\n            else {\n                for(let child: Sugar of sugar.getChildSugars()) {\n                    if(child === sugar.getChildCyclic().getReductionSugar()) continue;\n                    else {\n                        nonReductionSugars = recuversiveNonReductionSugar(child, nonReductionSugars);\n                    }\n                }\n            }\n        }\n    }\n    else {\n        nonReductionSugars.push(sugar);\n        return nonReductionSugars;\n    }\n    return nonReductionSugars;\n};\n\n\n\n//普通の糖鎖構造のYLayerのソート\nconst setEndFragmentYLayer = (sugar: Sugar, most_layer: number): number => {\n    if(sugar.hasChildSugars()) {\n        if(sugar.isChildCyclicEmpty()) {\n            switch(sugar.getChildSugars().length % 2) {\n                case 0: {\n                    for(let child: Sugar of sugar.getChildSugars()) {\n                        setEndFragmentYLayer(child, most_layer);\n                        if(child === sugar.getChildSugars()[Math.floor(sugar.getChildSugars().length / 2) - 1]){\n                            most_layer += 2;\n                        }\n                        else {\n                            most_layer += 1;\n                        }\n                    }\n                    sugar.setYLayer(sugar.getChildSugars()[sugar.getChildSugars().length / 2].getYLayer() - 1);\n                    break;\n                }\n                case 1: {\n                    for(let child: Sugar of sugar.getChildSugars()) {\n                        setEndFragmentYLayer(child, most_layer);\n                        most_layer += 1;\n                    }\n                    sugar.setYLayer(sugar.getChildSugars()[Math.floor(sugar.getChildSugars().length / 2)].getYLayer());\n                    break;\n                }\n            }\n        }\n        else {\n            let cyclicSugar: Sugar = sugar.getChildCyclic().getReductionSugar();\n            let counter = 0;\n            let maxY = 0;\n            let minY = 100;\n            switch((sugar.getChildSugars().length - 1) % 2) {\n                case 0: {\n                    for(let child: Sugar of sugar.getChildSugars()) {\n                        if(child === cyclicSugar) continue;\n                        if(maxY < most_layer) maxY = most_layer;\n                        if(minY > most_layer) minY = most_layer;\n                        setEndFragmentYLayer(child, most_layer);\n                        counter += 1;\n                        if(counter === (sugar.getChildSugars().length - 1) / 2){\n                            most_layer += 2;\n                        }\n                        else {\n                            most_layer += 1;\n                        }\n                    }\n                    sugar.setYLayer((maxY + minY) / 2);\n                    break;\n                }\n                case 1: {\n                    let maxY = 0;\n                    let minY = 100;\n                    for(let child: Sugar of sugar.getChildSugars()) {\n                        if(child === cyclicSugar) continue;\n                        if(maxY < most_layer) maxY = most_layer;\n                        if(minY > most_layer) minY = most_layer;\n                        setEndFragmentYLayer(child, most_layer);\n                        most_layer += 1;\n                    }\n                    sugar.setYLayer((maxY + minY) / 2);\n                    break;\n                }\n            }\n            return most_layer;\n        }\n    }\n    else {\n        sugar.setYLayer(most_layer);\n        return most_layer;\n    }\n    return most_layer;\n};\n\n\n\n\n\n\n\n\n","//@flow\n\"use strict\";\n\nimport {Sugar} from \"../class/Sugar\";\nimport {FragmentBracket} from \"../class/FragmentBracket\";\nimport {Fragment} from \"../class/Fragment\";\n\n//全ての単糖のchildSugarsのソート,\n//parentPositionの大きい順にソート\nexport const recurversiveSortChildSugars = (sugar: Sugar) => {\n    if(sugar.getGlycan().isFragmentBracketEmpty()) {\n        if(sugar.hasChildSugars()) {\n            if(sugar.isFragmentBracketEmpty()) {\n                if(sugar.isChildCyclicEmpty()) {\n                    for(let child: Sugar of sugar.getChildSugars()) {\n                        recurversiveSortChildSugars(child);\n                    }\n                    sugar.sortChildSugar();\n                }\n                else{\n                    for(let child: Sugar of sugar.getChildSugars()) {\n                        if(sugar.getChildCyclic().getReductionSugar() === child) continue;\n                        else recurversiveSortChildSugars(child);\n                    }\n                    sugar.sortChildSugar();\n                }\n            }\n            else {\n                let fragmentBracket: FragmentBracket = sugar.getFragmentBracket();\n                for(let fragment: Fragment of fragmentBracket.getChildGlycans()) {\n                    recurversiveSortChildSugars(fragment.getRootNode());\n                }\n            }\n        }\n        else {\n            if(sugar.isFragmentBracketEmpty()) {\n                return;\n            }\n            else {\n                let fragmentBracket: FragmentBracket = sugar.getFragmentBracket();\n                for(let fragment: Fragment of fragmentBracket.getChildGlycans()) {\n                    recurversiveSortChildSugars(fragment.getRootNode());\n                }\n            }\n        }\n    }\n    else {\n        let fragmentBracket: FragmentBracket = sugar.getGlycan().getFragmentBracket();\n        for(let fragment: Fragment of fragmentBracket.getChildGlycans()) {\n            recurversiveSortChildSugars(fragment.getRootNode());\n        }\n    }\n};\n","//@flow\n\"use strict\";\n\nexport const JSONKeys = {\n    Fragments: \"Fragments\",\n    Repeat: \"Repeat\",\n    Edges: \"Edges\",\n    Bridge: \"Bridge\",\n    Monosaccharides: \"Monosaccharides\",\n    Modifications: \"Modifications\",\n    TrivialName: \"TrivialName\",\n    Substituents: \"Substituents\",\n    Configuration: \"Configuration\",\n    SuperClass: \"SuperClass\",\n    RingSize: \"RingSize\",\n    AnomState: \"AnomState\",\n    AnomPosition: \"AnomPosition\",\n    Notation: \"Notation\",\n    PositionOne: \"PositionOne\",\n    Acceptor: \"Acceptor\",\n    Donor: \"Donor\",\n    Edge: \"Edge\",\n    Position: \"Position\",\n    Probability: \"Probability\",\n    High: \"High\",\n    Low: \"Low\",\n    LinkageType: \"LinkageType\",\n    Min: \"Min\",\n    Max: \"Max\",\n    Start: \"Start\",\n    End: \"End\",\n    Status: \"Status\"\n};\n","//@flow\n\"use strict\";\n\nexport const SNFGSymbolGlycan: Object = {\n    \"4eLeg\": {\n        shortName: \"4-Epilegionaminic acid\",\n        systematicNmae: \"5,7-Diamino-3,5,7,9-tetradeoxy-D-glycero-D-talo-non-2-ulopyranosonic acid\",\n        isomer: \"DD\",\n        ring: \"pyranose\",\n        carbBone: 9\n    },\n    \"6dAlt\": {\n        shortName: \"6-Deoxy-L-altrose\",\n        systematicNmae: \"6-Deoxy-L-altropyranose\",\n        isomer: \"L\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"6dAltNAc\": {\n        shortName: \"N-Acetyl-6-deoxy-L-altrosamine\",\n        systematicNmae: \"2-Acetamido-2,6-dideoxy-L-altropyranose\",\n        isomer: \"L\",\n        ring: \"pyranose\",\n        carbBone: 6\n\n    },\n    \"6dGul\": {\n        shortName: \"6-Deoxy-D-gulose\",\n        systematicNmae: \"6-Deoxy-D-gulopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n\n    },\n    \"6dTal\": {\n        shortName: \"6-Deoxy-D-talose\",\n        systematicNmae: \"6-Deoxy-D-talopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n\n    },\n    \"6dTalNAc\": {\n        shortName: \"N-Acetyl-6-deoxy-D-talosamine\",\n        systematicNmae: \"2-Acetamido-2,6-dideoxy-D-talopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Abe\": {\n        shortName: \"Abequose\",\n        systematicNmae: \"3,6-Dideoxy-D-xylo-hexopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n\n    },\n    \"Aci\": {\n        shortName: \"Acinetaminic acid\",\n        systematicNmae: \"5,7-Diamino-3,5,7,9-tetradeoxy-L-glycero-L-altro-non-2-ulopyranosonic acid\",\n        isomer: \"LL\",\n        ring: \"pyranose\",\n        carbBone: 9\n\n    },\n    \"All\": {\n        shortName: \"D-Allose\",\n        systematicNmae: \"D-Allopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n\n    },\n    \"AllA\": {\n        shortName: \"D-Alluronic acid\",\n        systematicNmae: \"D-Allopyranuronic acid\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n\n    },\n    \"AllN\": {\n        shortName: \"D-Allosamine\",\n        systematicNmae: \"2-Amino-2-deoxy-D-allopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n\n    },\n    \"AllNAc\": {\n        shortName: \"N-Acetyl-D-allosamine\",\n        systematicNmae: \"2-Acetamido-2-deoxy-D-allopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Alt\": {\n        shortName: \"L-Altrose\",\n        systematicNmae: \"L-Altropyranose\",\n        isomer: \"L\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"AltA\": {\n        shortName: \"L-Altruronic acid\",\n        systematicNmae: \"L-Altropyranuronic acid\",\n        isomer: \"L\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"AltN\": {\n        shortName: \"L-Altrosamine\",\n        systematicNmae: \"2-Amino-2-deoxy-L-altropyranose\",\n        isomer: \"L\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"AltNAc\": {\n        shortName: \"N-Acetyl-L-altrosamine\",\n        systematicNmae: \"2-Acetamido-2-deoxy-L-altropyranose\",\n        isomer: \"L\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Api\": {\n        shortName: \"L-Apiose\",\n        systematicNmae: \"3-C-(Hydroxymethyl)-L-erythro-tetrofuranose\",\n        isomer: \"L\",\n        ring: \"furanose\",\n        carbBone: 5\n    },\n    \"Ara\": {\n        shortName: \"L-Arabinose\",\n        systematicNmae: \"L-Arabinopyranose\",\n        isomer: \"L\",\n        ring: \"pyranose\",\n        carbBone: 5\n    },\n    \"Bac\": {\n        shortName: \"Bacillosamine\",\n        systematicNmae: \"2,4-Diamino-2,4,6-trideoxy-D-glucopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Col\": {\n        shortName: \"Colitose\",\n        systematicNmae: \"3,6-Dideoxy-L-xylo-hexopyranose\",\n        isomer: \"L\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"DDmanHep\": {\n        shortName: \"D-glycero-D-manno-Heptose\",\n        systematicNmae: \"D-glycero-D-manno-Heptopyranose\",\n        isomer: \"DD\",\n        ring: \"pyranose\",\n        carbBone: 7\n    },\n    \"Dha\": {\n        shortName: \"3-Deoxy-D-lyxo-heptulosaric acid\",\n        systematicNmae: \"3-Deoxy-D-lyxo-hept-2-ulopyranosaric acid\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 7\n    },\n    \"Dig\": {\n        shortName: \"D-Digitoxose\",\n        systematicNmae: \"2,6-Dideoxy-D-ribo-hexopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Fru\": {\n        shortName: \"D-Fructose\",\n        systematicNmae: \"D-arabino-Hex-2-ulopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Fuc\": {\n        shortName: \"L-Fucose\",\n        systematicNmae: \"6-Deoxy-L-galactopyranose\",\n        isomer: \"L\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"FucNAc\": {\n        shortName: \"N-Acetyl-L-fucosamine\",\n        systematicNmae: \"2-Acetamido-2,6-dideoxy-L-galactopyranose\",\n        isomer: \"L\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Gal\": {\n        shortName: \"D-Galactose\",\n        systematicNmae: \"D-Galactopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"GalA\": {\n        shortName: \"D-Galacturonic acid\",\n        systematicNmae: \"D-Galactopyranuronic acid\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"GalN\": {\n        shortName: \"D-Galactosamine\",\n        systematicNmae: \"2-Amino-2-deoxy-D-galactopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"GalNAc\": {\n        shortName: \"N-Acetyl-D-galactosamine\",\n        systematicNmae: \"2-Acetamido-2-deoxy-D-galactopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Glc\": {\n        shortName: \"D-Glucose\",\n        systematicNmae: \"D-Glucopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"GlcA\": {\n        shortName: \"D-Glucuronic acid\",\n        systematicNmae: \"D-Glucopyranuronic acid\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"GlcN\": {\n        shortName: \"D-Glucosamine\",\n        systematicNmae: \"2-Amino-2-deoxy-D-glucopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"GlcNAc\": {\n        shortName: \"N-Acetyl-D-glucosamine\",\n        systematicNmae: \"2-Acetamido-2-deoxy-D-glucopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Gul\": {\n        shortName: \"D-Gulose\",\n        systematicNmae: \"D-Gulopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"GulA\": {\n        shortName: \"D-Guluronic acid\",\n        systematicNmae: \"D-Gulopyranuronic acid\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"GulN\": {\n        shortName: \"D-Gulosamine\",\n        systematicNmae: \"2-Amino-2-deoxy-D-gulopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"GulNAc\": {\n        shortName: \"N-Acetyl-D-gulosamine\",\n        systematicNmae: \"2-Acetamido-2-deoxy-D-gulopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Ido\": {\n        shortName: \"L-Idose\",\n        systematicNmae: \"L-Idopyranose\",\n        isomer: \"L\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"IdoA\": {\n        shortName: \"L-Iduronic acid\",\n        systematicNmae: \"L-Idopyranuronic acid\",\n        isomer: \"L\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"IdoN\": {\n        shortName: \"L-Idosamine\",\n        systematicNmae: \"2-Amino-2-deoxy-L-idopyranose\",\n        isomer: \"L\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"IdoNAc\": {\n        shortName: \"N-Acetyl-L-idosamine\",\n        systematicNmae: \"2-Acetamido-2-deoxy-L-idopyranose\",\n        isomer: \"L\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Kdn\": {\n        shortName: \"3-Deoxy-D-glycero-D-galacto-nonulosonic acid\",\n        systematicNmae: \"3-Deoxy-D-glycero-D-galacto-non-2-ulopyranosonic acid\",\n        isomer: \"DD\",\n        ring: \"pyranose\",\n        carbBone: 9\n    },\n    \"Kdo\": {\n        shortName: \"3-Deoxy-D-manno-octulosonic acid\",\n        systematicNmae: \"3-Deoxy-D-manno-oct-2-ulopyranosonic acid\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 8\n    },\n    \"Leg\": {\n        shortName: \"Legionaminic acid\",\n        systematicNmae: \"5,7-Diamino-3,5,7,9-tetradeoxy-D-glycero-D-galacto-non-2-ulopyranosonic acid\",\n        isomer: \"DD\",\n        ring: \"pyranose\",\n        carbBone: 9\n    },\n    \"LDmanHep\": {\n        shortName: \"L-glycero-D-manno-Heptose\",\n        systematicNmae: \"L-glycero-D-manno-Heptopyranose\",\n        isomer: \"LD\",\n        ring: \"pyranose\",\n        carbBone: 7\n    },\n    \"Lyx\": {\n        shortName: \"D-Lyxose\",\n        systematicNmae: \"D-Lyxopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 5\n    },\n    \"Man\": {\n        shortName: \"D-Mannose\",\n        systematicNmae: \"D-Mannopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"ManA\": {\n        shortName: \"D-Mannuronic acid\",\n        systematicNmae: \"D-Mannopyranuronic acid\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"ManN\": {\n        shortName: \"D-Mannosamine\",\n        systematicNmae: \"2-Amino-2-deoxy-D-mannopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"ManNAc\": {\n        shortName: \"N-Acetyl-D-mannosamine\",\n        systematicNmae: \"2-Acetamido-2-deoxy-D-mannopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Mur\": {\n        shortName: \"Muramic acid\",\n        systematicNmae: \"2-Amino-3-O-[(R)-1-carboxyethyl]-2-deoxy-D-glucopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"MurNAc\": {\n        shortName: \"N-Acetylmuramic acid\",\n        systematicNmae: \"2-Acetamido-3-O-[(R)-1-carboxyethyl]-2-deoxy-D-glucopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"MurNGc\": {\n        shortName: \"N-Glycolylmuramic acid\",\n        systematicNmae: \"3-O-[(R)-1-Carboxyethyl]-2-deoxy-2-glycolamido-D-glucopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Neu\": {\n        shortName: \"Neuraminic acid\",\n        systematicNmae: \"5-Amino-3,5-dideoxy-D-glycero-D-galacto-non-2-ulopyranosonic acid\",\n        isomer: \"DD\",\n        ring: \"pyranose\",\n        carbBone: 5\n    },\n    \"Neu5Ac\": {\n        shortName: \"N-Acetylneuraminic acid\",\n        systematicNmae: \"5-Acetamido-3,5-dideoxy-D-glycero-D-galacto-non-2-ulopyranosonic acid\",\n        isomer: \"DD\",\n        ring: \"pyranose\",\n        carbBone: 5\n    },\n    \"Neu5Gc\": {\n        shortName: \"N-Glycolylneuraminic acid\",\n        systematicNmae: \"3,5-Dideoxy-5-glycolamido-D-glycero-D-galacto-non-2-ulopyranosonic acid\",\n        isomer: \"DD\",\n        ring: \"pyranose\",\n        carbBone: 5\n    },\n    \"Oli\": {\n        shortName: \"Olivose\",\n        systematicNmae: \"2,6-Dideoxy-D-arabino-hexopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Par\": {\n        shortName: \"Paratose\",\n        systematicNmae: \"3,6-Dideoxy-D-ribo-hexopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Pse\": {\n        shortName: \"Pseudaminic acid\",\n        systematicNmae: \"5,7-Diamino-3,5,7,9-tetradeoxy-L-glycero-L-manno-non-2-ulopyranosonic acid\",\n        isomer: \"LL\",\n        ring: \"pyranose\",\n        carbBone: 9\n    },\n    \"Psi\": {\n        shortName: \"D-Psicose\",\n        systematicNmae: \"D-ribo-Hex-2-ulopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Qui\": {\n        shortName: \"D-Quinovose\",\n        systematicNmae: \"6-Deoxy-D-glucopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"QuiNAc\": {\n        shortName: \"N-Acetyl-D-quinovosamine\",\n        systematicNmae: \"2-Acetamido-2,6-dideoxy-D-glucopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Rha\": {\n        shortName: \"L-Rhamnose\",\n        systematicNmae: \"6-Deoxy-L-mannopyranose\",\n        isomer: \"L\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"RhaNAc\": {\n        shortName: \"N-Acetyl-L-rhamnosamine\",\n        systematicNmae: \"2-Acetamido-2,6-dideoxy-L-mannopyranose\",\n        isomer: \"L\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Rib\": {\n        shortName: \"D-Ribose\",\n        systematicNmae: \"D-Ribopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 5\n    },\n    \"Sia\": {\n        shortName: \"Sialic acid\",\n        systematicNmae: \"Sialic acid residue of unspecified type\",\n        isomer: \"D\",\n        ring: \"undefined\",\n        carbBone: NaN\n    },\n    \"Sor\": {\n        shortName: \"L-Sorbose\",\n        systematicNmae: \"L-xylo-Hex-2-ulopyranose\",\n        isomer: \"L\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Tag\": {\n        shortName: \"D-Tagatose\",\n        systematicNmae: \"D-lyxo-Hex-2-ulopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Tal\": {\n        shortName: \"D-Talose\",\n        systematicNmae: \"D-Talopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"TalA\": {\n        shortName: \"D-Taluronic acid\",\n        systematicNmae: \"D-Talopyranuronic acid\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"TalN\": {\n        shortName: \"D-Talosamine\",\n        systematicNmae: \"2-Amino-2-deoxy-D-talopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"TalNAc\": {\n        shortName: \"N-Acetyl-D-talosamine\",\n        systematicNmae: \"2-Acetamido-2-deoxy-D-talopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Tyv\": {\n        shortName: \"Tyvelose\",\n        systematicNmae: \"3,6-Dideoxy-D-arabino-hexopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Xyl\": {\n        shortName: \"D-Xylose\",\n        systematicNmae: \"D-Xylopyranose\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 5\n    },\n    \"Hexose\": {\n        shortName: \"D-Hexose\",\n        systematicNmae: \"undefined\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"HexNAc\": {\n        shortName: \"N-Acetyl-D-Hexose\",\n        systematicNmae: \"undefined\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Hexosamine\": {\n        shortName: \"D-Hexosamine\",\n        systematicNmae: \"undefined\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Hexuronate\": {\n        shortName: \"D-Hexonic Acid\",\n        systematicNmae: \"undefined\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Deoxyhexose\": {\n        shortName: \"D-Deoxyhexoseo\",\n        systematicNmae: \"undefined\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"DeoxyhexNAc\": {\n        shortName: \"D-DeoxyhexNAc\",\n        systematicNmae: \"undefined\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Di-deoxyhexose\": {\n        shortName: \"D-Di-deoxyhexose\",\n        systematicNmae: \"undefined\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 6\n    },\n    \"Pentose\": {\n        shortName: \"D-Pentose\",\n        systematicNmae: \"undefined\",\n        isomer: \"D\",\n        ring: \"pyranose\",\n        carbBone: 5\n    },\n    \"Deoxynonulosonate\": {\n        shortName: \"Deoxynonulosonate\",\n        systematicNmae: \"undefined\",\n        isomer: \"undefined\",\n        ring: \"undefined\",\n        carbBone: 9\n    },\n    \"Di-deoxynonulosonate\": {\n        shortName: \"Di-deoxynonulosonate\",\n        systematicNmae: \"undefined\",\n        isomer: \"undefined\",\n        ring: \"undefined\",\n        carbBone: 9\n    },\n    \"Unknown\": {\n        shortName: \"Unknown\",\n        systematicNmae: \"undefined\",\n        isomer: \"undefined\",\n        ring: \"undefined\",\n        carbBone: NaN\n    },\n    \"Assigned\": {\n        shortName: \"Assigned\",\n        systematicNmae: \"undefined\",\n        isomer: \"undefined\",\n        ring: \"undefined\",\n        carbBone: NaN\n    }\n};","//@flow\n\"use strict\";\n\nexport function getColor(color: string): string  {\n    switch (color) {\n        case \"white\": return \"rgb(255, 255, 255)\";\n        case \"blue\": return \"rgb(0, 144, 188)\";\n        case \"green\": return \"rgb(0, 166, 81)\";\n        case \"yellow\": return \"rgb(255, 212, 0)\";\n        case \"orange\": return \"rgb(244, 121, 32)\";\n        case \"pink\": return \"rgb(246, 158, 161)\";\n        case \"purple\": return \"rgb(165, 67, 153)\";\n        case \"light_blue\": return \"rgb(143, 204, 233)\";\n        case \"brown\": return \"rgb(161, 122, 77)\";\n        case \"red\": return \"rgb(237, 28, 36)\";\n        case \"black\": return \"rgb(0, 0, 0)\";\n        default: return \"\";\n    }\n\n}","//@flow\n\"use strict\";\n\nexport let basicData: Object = {\n    \"symbolSize\": 15,\n    \"edgeSize\": 3.0,\n    \"linkageSize\": 20,\n    \"linkageTopYPositiom\": -20,\n    \"linkageBottomYPosition\": -5,\n    \"repeatRange\": 10,\n    \"repeatStrokeSize\": 5,\n    \"repeatNumberX\": 10,\n    \"repeatNumberY\": -10,\n    \"repeatNumberSize\": 20,\n    \"cyclicEdge\" : 150,    //cyclic構造のEdgeの曲がり具合\n    \"fragmentBracketToParentGlycan\": 10,\n    \"fragmentBracketStrokeSize\": 5,\n    \"symbolDistance\": 45,\n    \"canvasSize\": 5000,\n    \"fragmentEdgeDistance\": 15,\n    \"commaUpperDistance\": 15,\n    \"commaBottomDistance\": 5,\n    \"modificationSize\": 15,\n    \"compositionTextToSymbol\": 10,\n    \"compositionTextSize\": 30,\n    \"bridgeSize\": 30,\n    \"isomerSize\": 20,\n    \"ringSize\": 20,\n    \"svgLinkageUp\": 8,  //右、下にずらす\n    \"svgLinkagedown\": -8\n};","//@flow\n\"use strict\";\n\nexport const greekNumber: Object = {\n    \"tri\": 3,\n    \"tet\": 4,\n    \"pen\": 5,\n    \"hex\": 6,\n    \"hep\": 7,\n    \"oct\": 8,\n    \"non\": 9\n};","//@flow\n\"use strict\";\n\nexport const modifiData = {\n    \"RLac\": {\n        \"TrivalName\": \"(R)Lac\",\n        \"Name\": \"R-lactate\",\n        \"bridgeBind\": false\n    },\n    \"RPy\": {\n        \"TrivalName\": \"(R)Py\",\n        \"Name\": \"R-pyruvate\",\n        \"bridgeBind\": true\n    },\n    \"SLac\": {\n        \"TrivalName\": \"(S)Lac\",\n        \"Name\": \"S-lactate\",\n        \"bridgeBind\": false\n    },\n    \"SPy\": {\n        \"TrivalName\": \"(S)Py\",\n        \"Name\": \"S-pyruvate\",\n        \"bridgeBind\": true\n    },\n    \"XLac\": {\n        \"TrivalName\": \"(X)Lac\",\n        \"Name\": \"X-lactate\",\n        \"bridgeBind\": false\n    },\n    \"Am\": {\n        \"TrivalName\": \"Am\",\n        \"Name\": \"Amidino\",\n        \"bridgeBind\": false\n    },\n    \"Br\": {\n        \"TrivalName\": \"Br\",\n        \"Name\": \"Bromo\",\n        \"bridgeBind\": false\n    },\n    \"Cl\": {\n        \"TrivalName\": \"Cl\",\n        \"Name\": \"Cholo\",\n        \"bridgeBind\": false\n    },\n    \"DiMe\": {\n        \"TrivalName\": \"DiMe\",\n        \"Name\": \"Dimethyl\",\n        \"bridgeBind\": false\n    },\n    \"Et\": {\n        \"TrivalName\": \"Et\",\n        \"Name\": \"Ethanol\",\n        \"bridgeBind\": false\n    },\n    \"F\": {\n        \"TrivalName\": \"F\",\n        \"Name\": \"Fluoro\",\n        \"bridgeBind\": false\n    },\n    \"Fo\": {\n        \"TrivalName\": \"Fo\",\n        \"Name\": \"Formyl\",\n        \"bridgeBind\": false\n    },\n    \"Gc\": {\n        \"TrivalName\": \"Gc\",\n        \"Name\": \"Clycolyl\",\n        \"bridgeBind\": false\n    },\n    \"I\": {\n        \"TrivalName\": \"I\",\n        \"Name\": \"Iodo\",\n        \"bridgeBind\": false\n    },\n    \"N\": {\n        \"TrivalName\": \"N\",\n        \"Name\": \"Amine\",\n        \"bridgeBind\": true\n    },\n    \"NAm\": {\n        \"TrivalName\": \"NAm\",\n        \"Name\": \"N-amidino\",\n        \"bridgeBind\": false\n    },\n    \"NDiMe\": {\n        \"TrivalName\": \"NDiMe\",\n        \"Name\": \"N-dimethyl\",\n        \"bridgeBind\": false\n    },\n    \"NEtOH\": {\n        \"TrivalName\": \"NEtOH\",\n        \"Name\": \"N-ethanol\",\n        \"bridgeBind\": false\n    },\n    \"NFo\": {\n        \"TrivalName\": \"NFo\",\n        \"Name\": \"F-formyl\",\n        \"bridgeBind\": false\n    },\n    \"NGc\": {\n        \"TrivalName\": \"NGc\",\n        \"Name\": \"N-glycolyl\",\n        \"bridgeBind\": false\n    },\n    \"NMe\": {\n        \"TrivalName\": \"NMe\",\n        \"Name\": \"N-methyl\",\n        \"bridgeBind\": false\n    },\n    \"NS\": {\n        \"TrivalName\": \"NS\",\n        \"Name\": \"N-sulfate\",\n        \"bridgeBind\": true\n    },\n    \"NSuc\": {\n        \"TrivalName\": \"NSuc\",\n        \"Name\": \"N-succinate\",\n        \"bridgeBind\": false\n    },\n    \"OMeOH\": {\n        \"TrivalName\": \"OMeOH\",\n        \"Name\": \"Hydroxymethyl\",\n        \"bridgeBind\": false\n    },\n    \"P\": {\n        \"TrivalName\": \"P\",\n        \"Name\": \"Phosphate\",\n        \"bridgeBind\": true\n    },\n    \"PCho\": {\n        \"TrivalName\": \"PCho\",\n        \"Name\": \"Phosphocholine\",\n        \"bridgeBind\": false\n    },\n    \"PEm\": {\n        \"TrivalName\": \"Pem\",\n        \"Name\": \"Phospho-ethanol-amine\",\n        \"bridgeBind\": true\n    },\n    \"PPEm\": {\n        \"TrivalName\": \"PPEm\",\n        \"Name\": \"DiPhospho-ethanol-amine\",\n        \"bridgeBind\": true\n    },\n    \"Py\": {\n        \"TrivalName\": \"Py\",\n        \"Name\": \"X-pyruvate\",\n        \"bridgeBind\": true\n    },\n    \"PyP\": {\n        \"TrivalName\": \"PyP\",\n        \"Name\": \"Pyrophosphate\",\n        \"bridgeBind\": true\n    },\n    \"S\": {\n        \"TrivalName\": \"S\",\n        \"Name\": \"Sulfate\",\n        \"bridgeBind\": true\n    },\n    \"SH\": {\n        \"TrivalName\": \"SH\",\n        \"Name\": \"Thio\",\n        \"bridgeBind\": false\n    },\n    \"Suc\": {\n        \"TrivalName\": \"Suc\",\n        \"Name\": \"Succinate\",\n        \"bridgeBind\": true\n    },\n    \"Tri_P\": {\n        \"TrivalName\": \"Tri-P\",\n        \"Name\": \"Triphosphate\",\n        \"bridgeBind\": true\n    },\n    \"Undefined\": {\n        \"TrivalName\": \"\",\n        \"Name\": \"\",\n        \"bridgeBind\": true\n    }\n};","//@flow\n\"use strict\";\n\nimport {Glycan} from \"../class/Glycan\";\nimport {Sugar} from \"../class/Sugar\";\n\nexport const culc_max_min_layer = (glycanArray: Array<Glycan>) => {\n    let maxMInLayer: Array<number> = [-1, 100000, -100000, 1]; //[maxX(一番左のlayer), minX(一番右のlayer). maxY(一番上のlayer: 0, -1, -2 ...), minY(一番下のlayer: -20, -21...)]\n    for(let glycan: Glycan of glycanArray) {\n        maxMInLayer = recuversive_culc_layer(glycan.getRootNode(), maxMInLayer);\n    }\n    return maxMInLayer;\n\n};\n\nconst recuversive_culc_layer = (sugar: Sugar, maxMinLayer: Array<number>): Array<number> => {\n    if (sugar.getXLayer() >= maxMinLayer[0]) maxMinLayer[0] = sugar.getXLayer();\n    if (sugar.getXLayer() <= maxMinLayer[1]) maxMinLayer[1] = sugar.getXLayer();\n    if ((-1) * sugar.getYLayer() >= maxMinLayer[2]) maxMinLayer[2] = (-1) * sugar.getYLayer();\n    if ((-1) * sugar.getYLayer() <= maxMinLayer[3]) maxMinLayer[3] = (-1) * sugar.getYLayer();\n    for(let child: Sugar of sugar.getChildSugars()) {\n        maxMinLayer = recuversive_culc_layer(child, maxMinLayer);\n    }\n    return maxMinLayer;\n};\n\n","//@flow\n\"use strict\";\n\nimport { basicData } from \"./data/graphicsData\";\n\n\nexport let getRelativeCoordinate = (mouseX: number, mouseY: number): Array<number> => {\n    let normalDistace = basicData.symbolDistance + basicData.symbolSize * 2;\n    let distace = basicData.symbolDistance + basicData.symbolSize * 2;\n    let flagX = false;\n    let flagY = false;\n    while(distace < basicData.canvasSize + normalDistace) {\n        if(distace - normalDistace < mouseX && distace > mouseX){\n            mouseX = (distace - normalDistace) + (normalDistace / 2);\n            flagX = true;\n        }\n        if(distace - normalDistace < mouseY && distace > mouseY){\n            mouseY = (distace - normalDistace) + (normalDistace / 2);\n            flagY = true;\n        }\n        distace = distace + normalDistace;\n        if(distace > basicData.canvasSize - normalDistace) {\n            if(!flagX && !flagY) {\n                mouseX = 0;\n                mouseY = 0;\n            }\n        }\n    }\n\n    return [mouseX, mouseY];\n};\n\n\n","//@flow\n\"use stirct\";\nimport {JSONKeys} from \"../../data/JSONKeys\";\nimport {ParserBridge} from \"../../class/ParserClass/ParserBridge\";\n\nexport const assignBridge = (bridges: Object, bridgeObj: Object) => {\n    for(let key: string of Object.keys(bridges)) {\n        let parser: ParserBridge = new ParserBridge();\n        for(let bridge_key: string of Object.keys(bridges[key])) {\n            switch(bridge_key.toLowerCase()) {\n                case JSONKeys.Acceptor.toLowerCase(): {\n                    parser.Acceptor = bridges[key][bridge_key];\n                    break;\n                }\n                case JSONKeys.Donor.toLowerCase(): {\n                    parser.Donor = bridges[key][bridge_key];\n                    break;\n                }\n                case JSONKeys.Notation.toLowerCase(): {\n                    parser.Notation = bridges[key][bridge_key];\n                    break;\n                }\n            }\n        }\n        parser.checkNoatation();\n        bridgeObj[key] = parser;\n    }\n    return bridgeObj;\n};","//@flow\n\"use strict\";\n\nimport {JSONKeys} from \"../../data/JSONKeys\";\nimport { ParserBinding } from \"../../class/ParserClass/ParserBinding\";\n\nexport const assignEdges = (edges: Object, edgeObj: Object): Object => {\n    for(let key: string of Object.keys(edges)) {\n        let parser: ParserBinding = new ParserBinding();\n        for(let edge_key: string of Object.keys(edges[key])) {\n            switch(edge_key.toLowerCase()) {\n                case JSONKeys.Acceptor.toLowerCase(): {\n                    parser.Acceptor = edges[key][edge_key];\n                    break;\n                }\n                case JSONKeys.Donor.toLowerCase():{\n                    parser.Donor = edges[key][edge_key];\n                    break;\n                }\n                case JSONKeys.Position.toLowerCase(): {\n                    parser.Position = edges[key][edge_key];\n                    break;\n                }\n            }\n        }\n        parser.checkWhichSide();\n        edgeObj[key] = parser.createGlycoBond();\n    }\n    return edgeObj;\n};","//@flow\n\"use strict\";\n\nimport {ParserFragments} from \"../../class/ParserClass/PaeserFragments\";\nimport {JSONKeys} from \"../../data/JSONKeys\";\nimport {ParserFragmentEdge} from \"../../class/ParserClass/ParserFragmentEdge\";\n\nexport const assignFragment = (fragments: Object, fragmentObj: Object) => {\n    for(let key: string of Object.keys(fragments)) {\n        let parser: ParserFragments = new ParserFragments();\n        for(let frag_key: string of Object.keys(fragments[key])) {\n            switch(frag_key.toLowerCase()) {\n                case JSONKeys.Acceptor.toLowerCase(): {\n                    parser.Acceptor = fragments[key][frag_key];\n                    break;\n                }\n                case JSONKeys.Donor.toLowerCase(): {\n                    parser.Donor = fragments[key][frag_key];\n                    break;\n                }\n                case JSONKeys.Edge.toLowerCase(): {\n                    let parser_edge: ParserFragmentEdge = new ParserFragmentEdge();\n                    for(let edge_key: string of Object.keys(fragments[key][frag_key])){\n                        switch(edge_key.toLowerCase()) {\n                            case JSONKeys.Position.toLowerCase(): {\n                                for(let position_key: string of Object.keys(fragments[key][frag_key][edge_key])) {\n                                    switch(position_key.toLowerCase()) {\n                                        case JSONKeys.Acceptor.toLowerCase(): {\n                                            parser_edge.Acceptor = fragments[key][frag_key][edge_key][position_key];\n                                            break;\n                                        }\n                                        case JSONKeys.Donor.toLowerCase(): {\n                                            parser_edge.Donor = fragments[key][frag_key][edge_key][position_key];\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    parser.Edge = parser_edge;\n                    break;\n                }\n            }\n        }\n        fragmentObj[key] = parser;\n    }\n    return fragmentObj;\n};","//@flow\n\"use strict\";\n\nimport { JSONKeys } from \"../../data/JSONKeys\";\nimport { assignMonosaccharide } from \"./assignMonosaccharide\";\nimport {assignEdges} from \"./assignEdges\";\nimport {Glycan} from \"../../class/Glycan\";\nimport {Glycobond} from \"../../class/Glycobond\";\nimport {Sugar} from \"../../class/Sugar\";\nimport {assignBridge} from \"./assignBridge\";\nimport {Bridge} from \"../../class/Bridge\";\nimport { BridgeEdge } from \"../../class/BridgeEdge\";\nimport {assignRepeat} from \"./assignRepeat\";\nimport {RepeatBracket} from \"../../class/RepeatBracket\";\nimport {Fragment} from \"../../class/Fragment\";\nimport {FragmentBracket} from \"../../class/FragmentBracket\";\nimport {assignFragment} from \"./assignFragment\";\nimport {Cyclic} from \"../../class/Cyclic\";\n\nexport const assignMain = (json: Object) => {\n    let keys: Array<string> = Object.keys(json);\n    //Json のkeyをまとめるための変数郡\n    let monosaccharide_key: string = \"\";\n    let edges_key: string = \"\";\n    let repeat_key: string = \"\";\n    let fragment_key: string = \"\";\n    let bridge_key: string = \"\";\n\n    let monosaccharideObj: Object = {};\n    let edgeObj: Object = {};\n    let bridgeObj: Object = {};\n    let repeatObj: Object = {};\n    let fragmentObj: Object = {};\n    for(let key: string of keys) {\n        switch(key.toLowerCase()) {\n            case JSONKeys.Monosaccharides.toLowerCase(): {\n                monosaccharide_key = key;\n                break;\n            }\n            case JSONKeys.Edges.toLowerCase(): {\n                edges_key = key;\n                break;\n            }\n            case JSONKeys.Repeat.toLowerCase(): {\n                repeat_key = key;\n                break;\n            }\n            case JSONKeys.Fragments.toLowerCase(): {\n                fragment_key = key;\n                break;\n            }\n            case JSONKeys.Bridge.toLowerCase(): {\n                bridge_key = key;\n                break;\n            }\n        }\n    }\n    let glycanArray: Array<Glycan> = [];\n    monosaccharideObj = assignMonosaccharide(json[monosaccharide_key], monosaccharideObj);\n    edgeObj = assignEdges(json[edges_key], edgeObj);\n    let mainGlycan: Glycan = combineMonoEdge(monosaccharideObj, edgeObj);\n    glycanArray.push(mainGlycan);\n    bridgeObj = assignBridge(json[bridge_key], bridgeObj);\n    combineBridgeGlycan(monosaccharideObj, bridgeObj);\n    repeatObj = assignRepeat(json[repeat_key], repeatObj);\n    combineRepeat(monosaccharideObj, repeatObj);\n    glycanArray = setFragment(monosaccharideObj, glycanArray);\n    let nonReductionObj: Object = checkNonReductionSugars(glycanArray);\n    fragmentObj = assignFragment(json[fragment_key], fragmentObj);\n    checkFragmentParentType(nonReductionObj, fragmentObj, monosaccharideObj);\n    setGlycanData(glycanArray);\n    setFragmentData(glycanArray, monosaccharideObj, fragmentObj);\n\n    return glycanArray;\n\n\n\n\n};\n\nconst combineMonoEdge = (monoObj: Object, edgeObj: Object): Glycan => {\n    let glycan: Glycan = new Glycan();\n    glycan.setRootNode(monoObj[\"m0\"]);\n    monoObj[\"m0\"].setGlycan(glycan);\n    for(let edge_key: string of Object.keys(edgeObj)) {\n        let bind: Glycobond = edgeObj[edge_key];\n        let parentSugar: Sugar = monoObj[bind.jsonParentId];\n        let childSugar: Sugar = monoObj[bind.jsonChildId];\n        parentSugar.setChildSugars(childSugar);\n        childSugar.setParentSugars(parentSugar);\n        childSugar.setParentBond(bind);\n        bind.setChildAnomeric(childSugar.getAnomeric());\n        bind.setParentSugar(parentSugar);\n        bind.setChildSugar(childSugar);\n        let linktype: string = childSugar.getAnomeric();\n        for(let parentPosition: number of bind.getSvgParentPosition()) {\n            linktype += String(parentPosition) + \"/\";\n        }\n        bind.setLinkageType(\" \" + linktype.slice(0, -1));\n    }\n    return glycan;\n};\n\nconst combineBridgeGlycan = (monoObj: Object, bridgeObj: Object) => {\n    for(let b_key: string of Object.keys(bridgeObj)) {\n        let parentSugar: Sugar = monoObj[bridgeObj[b_key].Acceptor];\n        let childSugar: Sugar = monoObj[bridgeObj[b_key].Donor];\n        let glycobond: Glycobond = new Glycobond();\n        let FLAG = false;\n        for(let child: Sugar of parentSugar.getChildSugars()) {\n            if(child === childSugar) {\n                FLAG = true;\n                for(let bind: Glycobond of child.getParentBond()) {\n                    if(bind.getParentSugar() === parentSugar) {\n                        glycobond = bind;\n                    }\n                }\n            }\n        }\n        if(!FLAG) alert(\"BridgeError!!\");\n        let bridge: Bridge = new Bridge();\n        let bridgeEdge: BridgeEdge = new BridgeEdge();\n        bridge.setParentSugar(parentSugar);\n        if(bridgeObj[b_key].dataNoatation === \"Undefined\") {\n            bridge.setName(bridgeObj[b_key].Notation);\n        }\n        else {\n            bridge.setName(bridgeObj[b_key].dataNoatation);\n        }\n        bridge.setEdge(bridgeEdge);\n        bridgeEdge.setParentSugar(parentSugar);\n        bridgeEdge.setChildSugar(childSugar);\n        bridgeEdge.setLinkageType(glycobond.getLinkageType());\n        bridgeEdge.setChildAnomeric(glycobond.getChildAnomeric());\n        bridgeEdge.setChildPosition(glycobond.getChildPosition());\n        bridgeEdge.setParentPositon(glycobond.getParentPosition());\n        parentSugar.setChildBridge(bridge);\n    }\n};\n\nconst combineRepeat = (monoObj: Object, repeatObj: Object) => {\n    for(let re_key: string of Object.keys(repeatObj)) {\n        if(repeatObj[re_key] === \"childCyclic\") {\n            let cyclic: Cyclic = new Cyclic();\n            cyclic.setReductionSugar(monoObj[repeatObj[re_key].Start]);\n            cyclic.setNonReductionSugar(monoObj[repeatObj[re_key].End]);\n            monoObj[repeatObj[re_key].End].setChildCyclic(cyclic);\n            monoObj[repeatObj[re_key].Start].setParentCyclic(cyclic);\n        }\n        else {\n            let repeatBracket: RepeatBracket = new RepeatBracket();\n            let startSugar: Sugar = monoObj[repeatObj[re_key].Start];\n            let endSugar: Sugar = monoObj[repeatObj[re_key].End];\n            repeatBracket.setStartSugar(startSugar);\n            repeatBracket.setEndSugar(endSugar);\n            repeatBracket.setReepatNumber(repeatObj[re_key].numOfRepeat);\n            startSugar.setRepeatBracket(repeatBracket);\n        }\n    }\n};\n\nconst setFragment = (monoObj: Object, glycanArray: Array<Glycan>) => {\n    let mainGlycan: Glycan = glycanArray[0];\n    for(let key: string of Object.keys(monoObj)) {\n        if(monoObj[key] === mainGlycan.getRootNode()) continue;\n        else {\n            if(!monoObj[key].hasParentSugars()) {\n                let fragment: Fragment = new Fragment();\n                fragment.setRootNode(monoObj[key]);\n                glycanArray.push(fragment);\n            }\n        }\n    }\n\n    return glycanArray;\n};\n\nconst checkNonReductionSugars = (glycanArray: Array<Glycan>): Object => {\n    let resultObj: Object = {};\n    for(let glycan: Glycan of glycanArray) {\n        resultObj[glycan] =recuversiveCheck(glycan.getRootNode(), []);\n    }\n    return resultObj;\n\n};\n\nconst recuversiveCheck = (sugar: Sugar, nonSugars: Array<Sugar>): Array<Sugar> => {\n    if(sugar.hasChildSugars()) {\n        if(sugar.isChildCyclicEmpty()) {\n            for(let child: Sugar of sugar.getChildSugars()) {\n                nonSugars = recuversiveCheck(child, nonSugars);\n            }\n        }\n        else {\n            for(let child: Sugar of sugar.getChildSugars()) {\n                if(sugar.getChildCyclic().getReductionSugar() === child) continue;\n                else nonSugars = recuversiveCheck(child, nonSugars);\n            }\n        }\n    }\n    else {\n        nonSugars.push(sugar);\n        return nonSugars;\n    }\n    return nonSugars;\n};\n\nconst checkFragmentParentType = (nonReductionObj: Object, fragmentObj: Object, monoObj: Object) => {\n    for(let key: string of Object.keys(fragmentObj)) {\n        fragmentObj[key].checkParent(nonReductionObj, monoObj);\n    }\n};\n\nconst setGlycanData = (glycanArray: Array<Glycan>) => {\n    for(let glycan: Glycan of glycanArray) {\n        recuversiveSetGlycanData(glycan.getRootNode(), glycan);\n    }\n};\n\nconst recuversiveSetGlycanData = (sugar: Sugar, glycan: Glycan) => {\n    sugar.setGlycan(glycan);\n    if(sugar.hasChildSugars()) {\n        if(sugar.isChildCyclicEmpty()) {\n            for(let child: Sugar of sugar.getChildSugars()) {\n                recuversiveSetGlycanData(child, glycan);\n            }\n        }\n        else {\n            for(let child: Sugar of sugar.getChildSugars()) {\n                if(sugar.getChildCyclic().getReductionSugar() === child) continue;\n                else recuversiveSetGlycanData(child, glycan);\n            }\n        }\n    }\n};\n\nconst setFragmentData = (glycanArray: Array<Glycan>, monoObj: Object, fragmentObj: Object) => {\n    for(let key: string of Object.keys(fragmentObj)) {\n        let fragmentBracket: FragmentBracket;\n        if(fragmentObj[key].ParentIsGlycan) {\n            if(monoObj[fragmentObj[key].Acceptor[0]].getGlycan().isFragmentBracketEmpty()) {\n                fragmentBracket = new FragmentBracket();\n                fragmentBracket.setParentGlycan(monoObj[fragmentObj[key].Acceptor[0]].getGlycan());\n                monoObj[fragmentObj[key].Acceptor[0]].getGlycan().setFragmentBracket(fragmentBracket);\n            }\n            else {\n                fragmentBracket = monoObj[fragmentObj[key].Acceptor[0]].getGlycan().getFragmentBracket();\n            }\n            fragmentBracket.setChildGlycans(monoObj[fragmentObj[key].Donor].getGlycan());\n            monoObj[fragmentObj[key].Donor].getGlycan().setParentFragmentBracket(fragmentBracket);\n        }\n        else {\n            if(monoObj[fragmentObj[key].Acceptor[0]].isFragmentBracketEmpty()) {\n                fragmentBracket = new FragmentBracket();\n                fragmentBracket.isResuctionSugar = true;\n                for(let monoId: string of fragmentObj[key].Acceptor) {\n                    fragmentBracket.setParentSugars(monoObj[monoId]);\n                    monoObj[monoId].setFragmentBracket(fragmentBracket);\n                }\n            }\n            else {\n                fragmentBracket = monoObj[fragmentObj[key].Acceptor[0]].getFragmentBracket();\n            }\n            fragmentBracket.setChildGlycans(monoObj[fragmentObj[key].Donor].getGlycan());\n            monoObj[fragmentObj[key].Donor].getGlycan().setParentFragmentBracket(fragmentBracket);\n        }\n    }\n};","//@flow\n\"use strict\";\n\nimport { ParserMonosaccharide } from \"../../class/ParserClass/ParserMonosaccharide\";\nimport {JSONKeys} from \"../../data/JSONKeys\";\n\nexport const assignMonosaccharide = (monosaccharide: Object, monosaccharideObj: Object): Object => {\n    for(let key: string of Object.keys(monosaccharide)) {\n        let parser: ParserMonosaccharide = new ParserMonosaccharide();\n        for(let mono_key of Object.keys(monosaccharide[key])) {\n            switch(mono_key.toLowerCase()) {\n                case JSONKeys.Modifications.toLowerCase():{\n                    parser.Modifications = monosaccharide[key][mono_key];\n                    break;\n                }\n                case JSONKeys.TrivialName.toLowerCase(): {\n                    parser.TrivialName = monosaccharide[key][mono_key];\n                    break;\n                }\n                case JSONKeys.Substituents.toLowerCase(): {\n                    parser.Substituents = monosaccharide[key][mono_key];\n                    break;\n                }\n                case JSONKeys.Configuration.toLowerCase(): {\n                    parser.Configuration = monosaccharide[key][mono_key];\n                    break;\n                }\n                case JSONKeys.SuperClass.toLowerCase(): {\n                    parser.SuperClass = monosaccharide[key][mono_key];\n                    break;\n                }\n                case JSONKeys.RingSize.toLowerCase(): {\n                    parser.RingSize = monosaccharide[key][mono_key];\n                    break;\n                }\n                case JSONKeys.AnomState.toLowerCase(): {\n                    parser.AnomState = monosaccharide[key][mono_key];\n                    break;\n                }\n                case JSONKeys.AnomPosition.toLowerCase(): {\n                    parser.AnomPosition = monosaccharide[key][mono_key];\n                    break;\n                }\n                case JSONKeys.Notation.toLowerCase(): {\n                    parser.Notation = monosaccharide[key][mono_key];\n                    break;\n                }\n            }\n        }\n        monosaccharideObj[key] = parser.checkSNFGNoatation();\n        parser.checkModificaiton(monosaccharideObj[key]);\n        parser.checkSubstituents(monosaccharideObj[key]);\n        parser.checkAnome(monosaccharideObj[key]);\n    }\n    return monosaccharideObj;\n};","//@flow\n\"use strict\";\n\nimport { ParserRepeat } from \"../../class/ParserClass/ParserRepeat\";\nimport {JSONKeys} from \"../../data/JSONKeys\";\n\nexport const assignRepeat = (repeats: Object, repeatObj: Object) => {\n    for(let key: string of Object.keys(repeats)) {\n        let parser: ParserRepeat = new ParserRepeat();\n        for(let repeat_key: string of Object.keys(repeats[key])) {\n            switch (repeat_key.toLowerCase()) {\n                case JSONKeys.Min.toLowerCase(): {\n                    parser.Min = repeats[key][repeat_key];\n                    break;\n                }\n                case JSONKeys.Max.toLowerCase(): {\n                    parser.Max = repeats[key][repeat_key];\n                    break;\n\n                }\n                case JSONKeys.Position.toLowerCase(): {\n                    parser.Position = repeats[key][repeat_key];\n                    break;\n                }\n                case JSONKeys.Start.toLowerCase(): {\n                    parser.Start = repeats[key][repeat_key];\n                    break;\n                }\n                case JSONKeys.End.toLowerCase(): {\n                    parser.End = repeats[key][repeat_key];\n                    break;\n                }\n            }\n        }\n        parser.checkNumOfReapt();\n        repeatObj[key] = parser;\n    }\n    return repeatObj;\n};","//@flow\n\"use strict\";\n\nimport { JSONKeys } from \"../../data/JSONKeys\";\nimport {check_linkagetype} from \"./checkLinkagetype\";\n\nexport let check_bridge = (bridge: Object): boolean => {\n    let bridge_numKeys: Array<string> = Object.keys(bridge);\n    if(bridge_numKeys.length === 0) return true;\n    for(let bridge_numKey: string of bridge_numKeys) {\n        let bridge_keys: Array<string> = Object.keys(bridge[bridge_numKey]);\n        if(bridge_keys.length === 0 ) return false;\n        let ACCEPTOR_FLAG: boolean = false;\n        let DONOR_FLAG: boolean = false;\n        let NOTATION_FLAG: boolean = false;\n        let LINKAGETYPE_FLAG: boolean = false;\n        for(let bridge_key: string of bridge_keys) {\n            switch(bridge_key.toLowerCase()) {\n                case JSONKeys.Acceptor.toLowerCase(): {\n                    if(typeof bridge[bridge_numKey][bridge_key] === \"string\") ACCEPTOR_FLAG = true;\n                    else ACCEPTOR_FLAG = false;\n                    break;\n                }\n                case JSONKeys.Donor.toLowerCase(): {\n                    if(typeof bridge[bridge_numKey][bridge_key] === \"string\") DONOR_FLAG = true;\n                    else DONOR_FLAG = false;\n                    break;\n                }\n                case JSONKeys.Notation.toLowerCase(): {\n                    if(typeof bridge[bridge_numKey][bridge_key] === \"string\") NOTATION_FLAG = true;\n                    else NOTATION_FLAG = false;\n                    break;\n                }\n                case JSONKeys.LinkageType.toLowerCase(): {\n                    LINKAGETYPE_FLAG = check_linkagetype(bridge[bridge_numKey][bridge_key]);\n                    break;\n                }\n                default: {\n                    return false;\n                }\n            }\n        }\n        if(ACCEPTOR_FLAG && DONOR_FLAG && NOTATION_FLAG && LINKAGETYPE_FLAG) continue;\n        else return false;\n    }\n    return true;\n};","//@flow\n\"use strict\";\n\nimport { JSONKeys } from \"../../data/JSONKeys\";\nimport { check_position } from \"./checkPosition\";\nimport {check_probability} from \"./checkProbability\";\nimport {check_linkagetype} from \"./checkLinkagetype\";\n\n//fragment Edgeのcheck関数\nexport let check_edge = (edge: Object): boolean => {\n    let edge_numKeys: Array<string> = Object.keys(edge);\n    if(edge_numKeys.length === 0) return false;\n    for(let edge_numKey: string of edge_numKeys) {\n        let edge_keys: Array<string> = Object.keys(edge[edge_numKey]);\n        if(edge_keys.length === 0) return false;\n        let ACCEPTER_FLAG: boolean = false;\n        let DONOR_FLAG: boolean = false;\n        let POSITION_FLAG: boolean = false;\n        let PROBANILITY_FLAG: boolean = false;\n        let LINKAGETYPE_FLAG: boolean = false;\n        for(let edge_key of edge_keys) {\n            switch(edge_key.toLowerCase()) {\n                case JSONKeys.Acceptor.toLowerCase(): {\n                    if(typeof edge[edge_numKey][edge_key] === \"string\") ACCEPTER_FLAG = true;\n                    else ACCEPTER_FLAG = false;\n                    break;\n                }\n                case JSONKeys.Donor.toLowerCase(): {\n                    if(typeof edge[edge_numKey][edge_key] === \"string\") DONOR_FLAG = true;\n                    else DONOR_FLAG = false;\n                    break;\n                }\n                case JSONKeys.Position.toLowerCase(): {\n                    POSITION_FLAG = check_position(edge[edge_numKey][edge_key]);\n                    break;\n                }\n                case JSONKeys.Probability.toLowerCase(): {\n                    PROBANILITY_FLAG = check_probability(edge[edge_numKey][edge_key])\n                    break;\n                }\n                case JSONKeys.LinkageType.toLowerCase(): {\n                    LINKAGETYPE_FLAG = check_linkagetype(edge[edge_numKey][edge_key]);\n                    break;\n                }\n                default:{\n                    return false;\n                }\n            }\n        }\n        if(ACCEPTER_FLAG && DONOR_FLAG && POSITION_FLAG && PROBANILITY_FLAG && LINKAGETYPE_FLAG) continue;\n        else return false;\n    }\n    return true;\n};\n\nexport const check_fragment_edge = (edge: Object): boolean => {\n    let edge_keys: Array<string> = Object.keys(edge);\n    if(edge_keys.length === 0) return false;\n    let POSITION_FLAG: boolean = false;\n    let PROBANILITY_FLAG: boolean = false;\n    let LINKAGETYPE_FLAG: boolean = false;\n    for(let edge_key of edge_keys) {\n        switch(edge_key.toLowerCase()) {\n            case JSONKeys.Position.toLowerCase(): {\n                POSITION_FLAG = check_position(edge[edge_key]);\n                break;\n            }\n            case JSONKeys.Probability.toLowerCase(): {\n                PROBANILITY_FLAG = check_probability(edge[edge_key]);\n                break;\n            }\n            case JSONKeys.LinkageType.toLowerCase(): {\n                LINKAGETYPE_FLAG = check_linkagetype(edge[edge_key]);\n                break;\n            }\n            default:{\n                return false;\n            }\n        }\n    }\n    if(POSITION_FLAG && PROBANILITY_FLAG && LINKAGETYPE_FLAG) return true;\n    else return false;\n};","//@flow\n\"use strict\";\n\nimport { JSONKeys } from \"../../data/JSONKeys\";\nimport { check_fragment_edge } from \"./checkEdge\";\n\nexport let check_fragment = (fragment: Object): boolean => {\n    let fragment_numKeys: Array<string> = Object.keys(fragment);\n    if(fragment_numKeys.length === 0) return true;\n    for(let fragment_numKey: string of fragment_numKeys) {\n        let fragment_keys: Array<string> = Object.keys(fragment[fragment_numKey]);\n        if(fragment_keys.length === 0) return false;\n        let ACCEPTER_FLAG: boolean = true;\n        let DONOR_FLAG: boolean = true;\n        let EDGE_FLAG: boolean = false;\n        for(let fragment_key: string of fragment_keys) {\n            switch(fragment_key.toLowerCase()) {\n                case JSONKeys.Acceptor.toLowerCase(): {\n                    for(let monoKey: string of fragment[fragment_numKey][fragment_key]) {\n                        if(typeof monoKey === \"string\") continue;\n                        else ACCEPTER_FLAG = false;\n                    }\n                    break;\n                }\n                case JSONKeys.Donor.toLowerCase(): {\n                    if(typeof fragment[fragment_numKey][fragment_key] === \"string\") continue;\n                    else DONOR_FLAG = false;\n                    break;\n                }\n                case JSONKeys.Edge.toLowerCase(): {\n                    EDGE_FLAG = check_fragment_edge(fragment[fragment_numKey][fragment_key]);\n                    break;\n                }\n                default: {\n                    return false;\n                }\n            }\n        }\n        if(ACCEPTER_FLAG && DONOR_FLAG && EDGE_FLAG) continue;\n        else return false;\n    }\n    return true;\n};\n","//@flow\n\"use strict\";\n\nimport { JSONKeys } from \"../../data/JSONKeys\";\n\nexport let check_linkagetype = (linkage: Object): boolean => {\n    let linkage_keys: Array<string> = Object.keys(linkage);\n    if(linkage_keys.length === 0) return false;\n    let ACCEPTER_FLAG: boolean = false;\n    let DONOR_FLAG: boolean = false;\n    for(let linkage_key: string of linkage_keys) {\n        switch (linkage_key.toLowerCase()) {\n            case JSONKeys.Acceptor.toLowerCase(): {\n                if(typeof linkage[linkage_key] === \"string\") ACCEPTER_FLAG = true;\n                else ACCEPTER_FLAG = false;\n                break;\n            }\n            case JSONKeys.Donor.toLowerCase(): {\n                if(typeof linkage[linkage_key] === \"string\") DONOR_FLAG = true;\n                else DONOR_FLAG = false;\n                break;\n            }\n            default: {\n                return false;\n            }\n        }\n    }\n    if(ACCEPTER_FLAG && DONOR_FLAG) return true;\n    else return false;\n};\n","//@flow\n\"use strict\";\n\nimport { JSONKeys } from \"../../data/JSONKeys\";\nimport { check_notation_value } from \"./checkNotationValue\";\n\n\n/***\n *   JSON MonosaccharidesのModificationのチェック\n * @param json: Modification の配列\n * @returns {boolean} : cehckの結果OKかどうか\n */\nexport let check_modifications = (modifications: Array<Object>): boolean => {\n    if(modifications.length === 0) return true;\n    for(let modification: Object of modifications) {\n        let POSITION_FLAG:boolean = true;\n        let NOTATION_FLAG: boolean = false;\n        let keys: Array<string> = Object.keys(modification);\n        for(let key of keys) {\n            switch (key.toLowerCase()) {\n                case JSONKeys.Position.toLowerCase(): {\n                    for(let positionNum: number of modification[key]) {\n                        if(typeof positionNum !== \"number\") {\n                            POSITION_FLAG = false;\n                        }\n                    }\n                    break;\n                }\n                case JSONKeys.Notation.toLowerCase(): {\n                    NOTATION_FLAG = check_notation_value(modification[key]);\n                    if(!NOTATION_FLAG) return false;\n                    break;\n                }\n                default: {\n                    return false;\n                }\n            }\n        }\n        if(POSITION_FLAG && NOTATION_FLAG) {\n            continue;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n};\n","//@flow\n\"use strict\";\n\nimport {JSONKeys} from \"../../data/JSONKeys\";\nimport {check_modifications} from \"./checkModifications\";\nimport { check_substituents } from \"./checkSubstituents\";\n\nexport let check_monosaccharides = (monosaccharides: Object): boolean => {\n    let monosaccharides_numKeys: Array<string> = Object.keys(monosaccharides);\n    if(monosaccharides_numKeys.length === 0) return false;\n    let MODIFICATION_FLAG: boolean = false;\n    let TRIVIALNAME_FLAG: boolean = true;\n    let SUBSTITUENTS_FLAG: boolean = false;\n    let CONFIGURATION_FLAG: boolean = true;\n    let SUPERCLASS_FLAG: boolean = true;\n    let RINGSIZE_FLAG: boolean = true;\n    let ANOMSTATE_FLAG: boolean = true;\n    let ANOMPOSITION_FLAG: boolean = true;\n    let NOTATION_FLAG: boolean = true;\n    let RESULT_FLAG: boolean = true;\n    for(let monosaccharides_numKey: string of monosaccharides_numKeys) {\n        let monosaccharides_keys: Array<string> = Object.keys(monosaccharides[monosaccharides_numKey]);\n        for(let monosaccharides_key of monosaccharides_keys) {\n            switch (monosaccharides_key.toLowerCase()) {\n                case JSONKeys.Modifications.toLowerCase(): {\n                    MODIFICATION_FLAG = check_modifications(monosaccharides[monosaccharides_numKey][monosaccharides_key]);\n                    break;\n                }\n                case JSONKeys.TrivialName.toLowerCase(): {\n                    for(let trivialName: string of monosaccharides[monosaccharides_numKey][monosaccharides_key]) {\n                        if(typeof  trivialName === \"string\") continue;\n                        else TRIVIALNAME_FLAG = false;\n                    }\n                    break;\n                }\n                case JSONKeys.Substituents.toLowerCase(): {\n                    SUBSTITUENTS_FLAG = check_substituents(monosaccharides[monosaccharides_numKey][monosaccharides_key]);\n                    break;\n                }\n                case JSONKeys.Configuration.toLowerCase(): {\n                    for(let configuration: string of monosaccharides[monosaccharides_numKey][monosaccharides_key]) {\n                        if(typeof  configuration === \"string\") continue;\n                        else CONFIGURATION_FLAG = false;\n                    }\n                    break;\n                }\n                case JSONKeys.SuperClass.toLowerCase(): {\n                    if(typeof monosaccharides[monosaccharides_numKey][monosaccharides_key] === \"string\") continue;\n                    else SUPERCLASS_FLAG = false;\n                    break;\n                }\n                case JSONKeys.RingSize.toLowerCase(): {\n                    if(typeof monosaccharides[monosaccharides_numKey][monosaccharides_key] === \"string\") continue;\n                    else RINGSIZE_FLAG = false;\n                    break;\n                }\n                case JSONKeys.AnomState.toLowerCase(): {\n                    if(typeof monosaccharides[monosaccharides_numKey][monosaccharides_key] === \"string\") continue;\n                    else ANOMSTATE_FLAG = false;\n                    break;\n                }\n                case JSONKeys.AnomPosition.toLowerCase(): {\n                    if(typeof monosaccharides[monosaccharides_numKey][monosaccharides_key] === \"number\") continue;\n                    else ANOMPOSITION_FLAG = false;\n                    break;\n                }\n                case JSONKeys.Notation.toLowerCase(): {\n                    if(typeof monosaccharides[monosaccharides_numKey][monosaccharides_key] === \"string\") continue;\n                    else NOTATION_FLAG = false;\n                    break;\n                }\n                default: {\n                    return false;\n                }\n            }\n        }\n        if(MODIFICATION_FLAG && TRIVIALNAME_FLAG && SUBSTITUENTS_FLAG && CONFIGURATION_FLAG && SUPERCLASS_FLAG && RINGSIZE_FLAG && ANOMSTATE_FLAG && ANOMPOSITION_FLAG && NOTATION_FLAG){\n            continue;\n        }\n        else {\n            RESULT_FLAG = false;\n            break;\n        }\n    }\n    if(RESULT_FLAG) return true;\n    else return false;\n};","//@flow\n\"use strict\";\n\nexport let check_notation_value = (notation: string): boolean => {\n    if(typeof notation === \"string\") return true;\n    else return false;\n};","//@flow\n\"use strict\";\n\nimport { JSONKeys } from \"../../data/JSONKeys\";\n\nexport let check_position = (position: Object): boolean => {\n    let position_keys: Array<string> = Object.keys(position);\n    if(position_keys.length === 0) return false;\n    let ACCEPTER_FLAG: boolean = true;\n    let DONOR_FLAG: boolean = true;\n    for(let position_key: string of position_keys) {\n        switch(position_key.toLowerCase()) {\n            case JSONKeys.Acceptor.toLowerCase(): {\n                for(let accepter: number of position[position_key]) {\n                    if(typeof accepter === \"number\") continue;\n                    else ACCEPTER_FLAG = false;\n                }\n                break;\n            }\n            case JSONKeys.Donor.toLowerCase(): {\n                for(let donor: number of position[position_key]) {\n                    if(typeof donor === \"number\") continue;\n                    else DONOR_FLAG = false;\n                }\n                break;\n            }\n            default: {\n                return false;\n            }\n        }\n    }\n    if(ACCEPTER_FLAG && DONOR_FLAG) return true;\n    else return false;\n};\n","//@flow\n\"use strict\";\n\nimport { JSONKeys } from \"../../data/JSONKeys\";\n\nexport let check_probability = (probability: Object): boolean => {\n    let probability_keys: Array<string> = Object.keys(probability);\n    if(probability_keys.length === 0) return false;\n    let HIGH_FLAG: boolean = false;\n    let LOW_FLAG: boolean = false;\n    for(let probability_key: string of probability_keys) {\n        switch(probability_key.toLowerCase()){\n            case JSONKeys.High.toLowerCase(): {\n                if(typeof probability[probability_key] === \"number\") HIGH_FLAG = true;\n                else HIGH_FLAG = false;\n                break;\n            }\n            case JSONKeys.Low.toLowerCase(): {\n                if(typeof probability[probability_key] === \"number\") LOW_FLAG = true;\n                else LOW_FLAG = false;\n                break;\n            }\n            default: {\n                return false;\n            }\n        }\n    }\n    if(HIGH_FLAG && LOW_FLAG) return true;\n    else false;\n};\n","//@flow\n\"use strict\";\n\nimport { JSONKeys } from \"../../data/JSONKeys\";\nimport { check_position } from \"./checkPosition\";\nimport { check_probability } from \"./checkProbability\";\nimport { check_linkagetype } from \"./checkLinkagetype\";\n\nexport let check_repeat = (repeat: Object): boolean => {\n    let repeat_numKeys: Array<string> = Object.keys(repeat);\n    if(repeat_numKeys.length === 0) return true;\n    for(let repeat_numKey: string of repeat_numKeys) {\n        let repeat_keys: Array<string> = Object.keys(repeat[repeat_numKey]);\n        if(repeat_keys.length === 0) return false;\n        let MIN_FLAG: boolean = false;\n        let POSITION_FLAG: boolean = false;\n        let MAX_FLAG: boolean = false;\n        let START_FLAG: boolean = false;\n        let PROBABILITY_FLAG: boolean = false;\n        let END_FLAG: boolean = false;\n        // let BRIDGE_FLAG: boolean = false;\n        let LINKAGE_FLAG: boolean = false;\n        for(let repeat_key: string of repeat_keys) {\n            switch(repeat_key.toLowerCase()) {\n                case JSONKeys.Min.toLowerCase(): {\n                    if(typeof repeat[repeat_numKey][repeat_key] === \"number\") MIN_FLAG = true;\n                    else MIN_FLAG = false;\n                    break;\n                }\n                case JSONKeys.Position.toLowerCase(): {\n                    POSITION_FLAG = check_position(repeat[repeat_numKey][repeat_key]);\n                    break;\n                }\n                case JSONKeys.Max.toLowerCase(): {\n                    if(typeof repeat[repeat_numKey][repeat_key] === \"number\") MAX_FLAG = true;\n                    else MAX_FLAG = false;\n                    break;\n\n                }\n                case JSONKeys.Start.toLowerCase(): {\n                    if(typeof repeat[repeat_numKey][repeat_key] === \"string\") START_FLAG = true;\n                    else START_FLAG = false;\n                    break;\n                }\n                case JSONKeys.Probability.toLowerCase(): {\n                    PROBABILITY_FLAG = check_probability(repeat[repeat_numKey][repeat_key]);\n                    break;\n                }\n                case JSONKeys.End.toLowerCase(): {\n                    if(typeof repeat[repeat_numKey][repeat_key] === \"string\") END_FLAG = true;\n                    else END_FLAG = false;\n                    break;\n                }\n                // case JSONKeys.Bridge.toLowerCase(): {\n                //     BRIDGE_FLAG = check_bridge(repeat[repeat_numKey][repeat_key]);\n                //     break;\n                // }\n                case JSONKeys.LinkageType.toLowerCase(): {\n                    LINKAGE_FLAG = check_linkagetype(repeat[repeat_numKey][repeat_key]);\n                    break;\n                }\n                default: {\n                    return false;\n                }\n            }\n        }\n        if(MIN_FLAG && POSITION_FLAG && MAX_FLAG && START_FLAG && PROBABILITY_FLAG && END_FLAG && LINKAGE_FLAG) continue;\n        else return false;\n    }\n    return true;\n};\n","//@flow\n\"use strict\";\n\nimport {JSONKeys} from \"../../data/JSONKeys\";\nimport {check_position} from \"./checkPosition\";\nimport {check_probability} from \"./checkProbability\";\nimport {check_linkagetype} from \"./checkLinkagetype\";\nimport {check_notation_value} from \"./checkNotationValue\";\n\nexport const check_substituents = (substituents: Array<Object>) => {\n    for(let substituent: Object of substituents) {\n        let keys: Array<string> = Object.keys(substituent);\n        if(keys.length === 0 ) return false;\n        let POSITION_FLAG: boolean = false;\n        let STATUS_FLAG: boolean = false;\n        let PROBABILITY_FLAG: boolean = false;\n        let LINKAGETYPE_FLAG: boolean = false;\n        let NOTATION_FLAG: boolean = false;\n        for(let key: string of keys) {\n            switch (key.toLowerCase()) {\n                case JSONKeys.Position.toLowerCase(): {\n                    POSITION_FLAG = check_position(substituent[key]);\n                    break;\n                }\n                case JSONKeys.Status.toLowerCase(): {\n                    switch (substituent[key].toLowerCase()) {\n                        case \"simple\":\n                        case \"fuzzy\": {\n                            STATUS_FLAG = true;\n                            break;\n                        }\n                        default: STATUS_FLAG = false;\n                    }\n                    break;\n                }\n                case JSONKeys.Probability.toLowerCase(): {\n                    PROBABILITY_FLAG = check_probability(substituent[key]);\n                    break;\n                }\n                case JSONKeys.LinkageType.toLowerCase(): {\n                    LINKAGETYPE_FLAG = check_linkagetype(substituent[key]);\n                    break;\n                }\n                case JSONKeys.Notation.toLowerCase(): {\n                    NOTATION_FLAG = check_notation_value(substituent[key]);\n                    break;\n                }\n                default: return false;\n            }\n        }\n        if(POSITION_FLAG && STATUS_FLAG && PROBABILITY_FLAG && LINKAGETYPE_FLAG && NOTATION_FLAG) continue;\n        else return false;\n    }\n    return true;\n};","//@flow\n\"use strict\";\n\nimport { nodeModeType } from \"./nodeModeType\";\nimport { getColor } from \"./data/getColor\";\n\nexport function nodeModeSearch(target: string) {\n    switch (target.toLowerCase()) {\n        case \"Hexose\".toLowerCase(): return nodeModeType.HEXOSE;\n        case \"Glc\".toLowerCase(): return nodeModeType.GLC;\n        case \"Man\".toLowerCase(): return nodeModeType.MAN;\n        case \"Gal\".toLowerCase(): return nodeModeType.GAL;\n        case \"Gul\".toLowerCase(): return nodeModeType.GUL;\n        case \"Alt\".toLowerCase(): return nodeModeType.ALT;\n        case \"All\".toLowerCase(): return nodeModeType.ALL;\n        case \"Tal\".toLowerCase(): return nodeModeType.TAL;\n        case \"Ido\".toLowerCase(): return nodeModeType.IDO;\n        case \"HexNAc\".toLowerCase(): return nodeModeType.HEXNAC;\n        case \"GlcNAc\".toLowerCase(): return nodeModeType.GLCNAC;\n        case \"ManNAc\".toLowerCase(): return nodeModeType.MANNAC;\n        case \"GalNAc\".toLowerCase(): return nodeModeType.GALNAC;\n        case \"GulNAc\".toLowerCase(): return nodeModeType.GULNAC;\n        case \"AltNAc\".toLowerCase(): return nodeModeType.ALTNAC;\n        case \"AllNAc\".toLowerCase(): return nodeModeType.ALLNAC;\n        case \"TalNAc\".toLowerCase(): return nodeModeType.TALNAC;\n        case \"IdoNAc\".toLowerCase(): return nodeModeType.IDONAC;\n        case \"Hexosamine\".toLowerCase(): return nodeModeType.HEXOSAMINE;\n        case \"GlcN\".toLowerCase(): return nodeModeType.GLCN;\n        case \"ManN\".toLowerCase(): return nodeModeType.MANN;\n        case \"GalN\".toLowerCase(): return nodeModeType.GALN;\n        case \"GulN\".toLowerCase(): return nodeModeType.GULN;\n        case \"AltN\".toLowerCase(): return nodeModeType.ALTN;\n        case \"AllN\".toLowerCase(): return nodeModeType.ALLN;\n        case \"TalN\".toLowerCase(): return nodeModeType.TALN;\n        case \"IdoN\".toLowerCase(): return nodeModeType.IDON;\n        case \"Hexuronate\".toLowerCase(): return nodeModeType.HEXURONATE;\n        case \"GlcA\".toLowerCase(): return nodeModeType.GLCA;\n        case \"ManA\".toLowerCase(): return nodeModeType.MANA;\n        case \"GalA\".toLowerCase(): return nodeModeType.GALA;\n        case \"GulA\".toLowerCase(): return nodeModeType.GULA;\n        case \"AltA\".toLowerCase(): return nodeModeType.ALTA;\n        case \"AllA\".toLowerCase(): return nodeModeType.ALLA;\n        case \"TalA\".toLowerCase(): return nodeModeType.TALA;\n        case \"IdoA\".toLowerCase(): return nodeModeType.IDOA;\n        case \"Deoxyhexose\".toLowerCase(): return nodeModeType.DEOXYHEXOSE;\n        case \"Qui\".toLowerCase(): return nodeModeType.QUI;\n        case \"Rha\".toLowerCase(): return nodeModeType.RHA;\n        case \"6dGul\".toLowerCase(): return nodeModeType.D6GUL;\n        case \"6dAlt\".toLowerCase(): return nodeModeType.D6ALT;\n        case \"6dTal\".toLowerCase(): return nodeModeType.D6TAL;\n        case \"Fuc\".toLowerCase(): return nodeModeType.FUC;\n        case \"DeoxyhexNAc\".toLowerCase(): return nodeModeType.DEOXYHEXNAC;\n        case \"QuiNAc\".toLowerCase(): return nodeModeType.QUINAC;\n        case \"RhaNAc\".toLowerCase(): return nodeModeType.RHANAC;\n        case \"6dAltNAc\".toLowerCase(): return nodeModeType.D6ALTNAC;\n        case \"6dTalNAc\".toLowerCase(): return nodeModeType.D6TALNAC;\n        case \"FucNAc\".toLowerCase(): return nodeModeType.FUCNAC;\n        case \"Di-deoxyhexose\".toLowerCase(): return nodeModeType.DI_DEOXYHEXOSE;\n        case \"Oli\".toLowerCase(): return nodeModeType.OLI;\n        case \"Tyv\".toLowerCase(): return nodeModeType.TYV;\n        case \"Abe\".toLowerCase(): return nodeModeType.ABE;\n        case \"Par\".toLowerCase(): return nodeModeType.PAR;\n        case \"Dig\".toLowerCase(): return nodeModeType.DIG;\n        case \"Col\".toLowerCase(): return nodeModeType.COL;\n        case \"Pentose\".toLowerCase(): return nodeModeType.PENTOSE;\n        case \"Ara\".toLowerCase(): return nodeModeType.ARA;\n        case \"Lyx\".toLowerCase(): return nodeModeType.LYX;\n        case \"Xyl\".toLowerCase(): return nodeModeType.XYL;\n        case \"Rib\".toLowerCase(): return nodeModeType.RIB;\n        case \"Deoxynonulosonate\".toLowerCase(): return nodeModeType.DEOXYNONULOSONATE;\n        case \"Kdn\".toLowerCase(): return nodeModeType.KDN;\n        case \"Neu5Ac\".toLowerCase(): return nodeModeType.NEU5AC;\n        case \"Neu5Gc\".toLowerCase(): return nodeModeType.NEU5GC;\n        case \"Neu\".toLowerCase(): return nodeModeType.NEU;\n        case \"Sia\".toLowerCase(): return nodeModeType.SIA;\n        case \"Di-deoxynonulosonate\".toLowerCase(): return nodeModeType.DI_DEOXYNONULOSONATE;\n        case \"Pse\".toLowerCase(): return nodeModeType.PSE;\n        case \"Leg\".toLowerCase(): return nodeModeType.LEG;\n        case \"Aci\".toLowerCase(): return nodeModeType.ACI;\n        case \"4eLeg\".toLowerCase(): return nodeModeType.E4LEG;\n        case \"Unknown\".toLowerCase(): return nodeModeType.UNKNOWN;\n        case \"Bac\".toLowerCase(): return nodeModeType.BAC;\n        case \"LDmanHep\".toLowerCase(): return nodeModeType.LDMANHEP;\n        case \"Kdo\".toLowerCase(): return nodeModeType.KDO;\n        case \"Dha\".toLowerCase(): return nodeModeType.DHA;\n        case \"DDmanHep\".toLowerCase(): return nodeModeType.DDMANHEP;\n        case \"MurNAc\".toLowerCase(): return nodeModeType.MURNAC;\n        case \"MurNGc\".toLowerCase(): return nodeModeType.MURNGC;\n        case \"Mur\".toLowerCase(): return nodeModeType.MUR;\n        case \"Assigned\".toLowerCase(): return nodeModeType.ASSIGNED;\n        case \"Api\".toLowerCase(): return nodeModeType.API;\n        case \"Fru\".toLowerCase(): return nodeModeType.FRU;\n        case \"Tag\".toLowerCase(): return nodeModeType.TAG;\n        case \"Sor\".toLowerCase(): return nodeModeType.SOR;\n        case \"Psi\".toLowerCase(): return nodeModeType.PSI;\n        default: return nodeModeType.NOT_SELECTED;\n    }\n}\n\nexport function nodeType(target: Symbol): Symbol {\n    switch (target) {\n        case nodeModeType.HEXOSE:\n        case nodeModeType.GLC:\n        case nodeModeType.MAN:\n        case nodeModeType.GAL:\n        case nodeModeType.GUL:\n        case nodeModeType.ALT:\n        case nodeModeType.ALL:\n        case nodeModeType.TAL:\n        case nodeModeType.IDO:\n            return nodeModeType.HEXOSE;\n        case  nodeModeType.HEXNAC:\n        case nodeModeType.GLCNAC:\n        case nodeModeType.MANNAC:\n        case nodeModeType.GALNAC:\n        case nodeModeType.GULNAC:\n        case nodeModeType.ALTNAC:\n        case nodeModeType.ALLNAC:\n        case nodeModeType.TALNAC:\n        case nodeModeType.IDONAC:\n            return nodeModeType.HEXNAC;\n        case  nodeModeType.HEXOSAMINE:\n        case nodeModeType.GLCN:\n        case nodeModeType.MANN:\n        case nodeModeType.GALN:\n        case nodeModeType.GULN:\n        case nodeModeType.ALTN:\n        case nodeModeType.ALLN:\n        case nodeModeType.TALN:\n        case nodeModeType.IDON:\n            return nodeModeType.HEXOSAMINE;\n        case  nodeModeType.HEXURONATE:\n        case nodeModeType.GLCA:\n        case nodeModeType.MANA:\n        case nodeModeType.GALA:\n        case nodeModeType.GULA:\n        case nodeModeType.ALTA:\n        case nodeModeType.ALLA:\n        case nodeModeType.TALA:\n        case nodeModeType.IDOA:\n            return nodeModeType.HEXURONATE;\n        case  nodeModeType.DEOXYHEXOSE:\n        case nodeModeType.QUI:\n        case nodeModeType.RHA:\n        case nodeModeType.D6GUL:\n        case nodeModeType.D6ALT:\n        case nodeModeType.D6TAL:\n        case nodeModeType.FUC:\n            return nodeModeType.DEOXYHEXOSE;\n        case  nodeModeType.DEOXYHEXNAC:\n        case nodeModeType.QUINAC:\n        case nodeModeType.RHANAC:\n        case nodeModeType.D6ALTNAC:\n        case nodeModeType.D6TALNAC:\n        case nodeModeType.FUCNAC:\n            return nodeModeType.DEOXYHEXNAC;\n        case  nodeModeType.DI_DEOXYHEXOSE:\n        case nodeModeType.OLI:\n        case nodeModeType.TYV:\n        case nodeModeType.ABE:\n        case nodeModeType.PAR:\n        case nodeModeType.DIG:\n        case nodeModeType.COL:\n            return nodeModeType.DI_DEOXYHEXOSE;\n        case  nodeModeType.PENTOSE:\n        case nodeModeType.ARA:\n        case nodeModeType.LYX:\n        case nodeModeType.XYL:\n        case nodeModeType.RIB:\n            return nodeModeType.PENTOSE;\n        case  nodeModeType.DEOXYNONULOSONATE:\n        case nodeModeType.KDN:\n        case nodeModeType.NEU5AC:\n        case nodeModeType.NEU5GC:\n        case nodeModeType.NEU:\n        case nodeModeType.SIA:\n            return nodeModeType.DEOXYNONULOSONATE;\n        case  nodeModeType.DI_DEOXYNONULOSONATE:\n        case nodeModeType.PSE:\n        case nodeModeType.LEG:\n        case nodeModeType.ACI:\n        case nodeModeType.E4LEG:\n            return nodeModeType.DI_DEOXYNONULOSONATE;\n        case  nodeModeType.UNKNOWN:\n        case nodeModeType.BAC:\n        case nodeModeType.LDMANHEP:\n        case nodeModeType.KDO:\n        case nodeModeType.DHA:\n        case nodeModeType.DDMANHEP:\n        case nodeModeType.MURNAC:\n        case nodeModeType.MURNGC:\n        case nodeModeType.MUR:\n            return nodeModeType.UNKNOWN;\n        case  nodeModeType.ASSIGNED:\n        case nodeModeType.API:\n        case nodeModeType.FRU:\n        case nodeModeType.TAG:\n        case nodeModeType.SOR:\n        case nodeModeType.PSI:\n            return nodeModeType.ASSIGNED;\n        default:\n            return nodeModeType.NOT_SELECTED;\n    }\n\n}\n\nexport const getSymbolColor = (SNFGNameSymbol: Symbol): string => {\n    switch (SNFGNameSymbol) {\n        case nodeModeType.HEXOSE:\n        case nodeModeType.HEXNAC:\n        case nodeModeType.HEXOSAMINE:\n        case nodeModeType.HEXURONATE:\n        case nodeModeType.DEOXYHEXOSE:\n        case nodeModeType.DEOXYHEXNAC:\n        case nodeModeType.DI_DEOXYHEXOSE:\n        case nodeModeType.PENTOSE:\n        case nodeModeType.DEOXYNONULOSONATE:\n        case nodeModeType.DI_DEOXYNONULOSONATE:\n        case nodeModeType.UNKNOWN:\n        case nodeModeType.ASSIGNED:\n            return getColor(\"white\");\n        case nodeModeType.GLC:\n        case nodeModeType.GLCNAC:\n        case nodeModeType.GLCN:\n        case nodeModeType.GLCA:\n        case nodeModeType.QUI:\n        case nodeModeType.QUINAC:\n        case nodeModeType.OLI:\n        case nodeModeType.BAC:\n        case nodeModeType.API:\n            return getColor(\"blue\");\n        case nodeModeType.MAN:\n        case nodeModeType.MANNAC:\n        case nodeModeType.MANN:\n        case nodeModeType.MANA:\n        case nodeModeType.RHA:\n        case nodeModeType.RHANAC:\n        case nodeModeType.TYV:\n        case nodeModeType.ARA:\n        case nodeModeType.KDN:\n        case nodeModeType.PSE:\n        case nodeModeType.LDMANHEP:\n        case nodeModeType.FRU:\n            return getColor(\"green\");\n        case nodeModeType.GAL:\n        case nodeModeType.GALNAC:\n        case nodeModeType.GALN:\n        case nodeModeType.GALA:\n        case nodeModeType.LYX:\n        case nodeModeType.LEG:\n        case nodeModeType.KDO:\n        case nodeModeType.TAG:\n            return getColor(\"yellow\");\n        case nodeModeType.GUL:\n        case nodeModeType.GULNAC:\n        case nodeModeType.GULN:\n        case nodeModeType.GULA:\n        case nodeModeType.D6GUL:\n        case nodeModeType.ABE:\n        case nodeModeType.XYL:\n        case nodeModeType.DHA:\n        case nodeModeType.SOR:\n            return getColor(\"orange\");\n        case nodeModeType.ALT:\n        case nodeModeType.ALTNAC:\n        case nodeModeType.ALTN:\n        case nodeModeType.ALTA:\n        case nodeModeType.D6ALT:\n        case nodeModeType.D6ALTNAC:\n        case nodeModeType.PAR:\n        case nodeModeType.RIB:\n        case nodeModeType.ACI:\n        case nodeModeType.DDMANHEP:\n        case nodeModeType.PSI:\n            return getColor(\"pink\");\n        case nodeModeType.ALL:\n        case nodeModeType.ALLNAC:\n        case nodeModeType.ALLN:\n        case nodeModeType.ALLA:\n        case nodeModeType.DIG:\n        case nodeModeType.NEU5AC:\n        case nodeModeType.MURNAC:\n            return getColor(\"purple\");\n        case nodeModeType.TAL:\n        case nodeModeType.TALNAC:\n        case nodeModeType.TALN:\n        case nodeModeType.TALA:\n        case nodeModeType.D6TAL:\n        case nodeModeType.D6TALNAC:\n        case nodeModeType.COL:\n        case nodeModeType.NEU5GC:\n        case nodeModeType.E4LEG:\n        case nodeModeType.MURNGC:\n            return getColor(\"light_blue\");\n        case nodeModeType.IDO:\n        case nodeModeType.IDONAC:\n        case nodeModeType.IDON:\n        case nodeModeType.IDOA:\n        case nodeModeType.NEU:\n        case nodeModeType.MUR:\n            return getColor(\"brown\");\n        case nodeModeType.FUC:\n        case nodeModeType.FUCNAC:\n        case nodeModeType.SIA:\n            return getColor(\"red\");\n        default: return \"\";\n\n    }\n\n};","\"use strict\";\n\nexport const nodeModeType = {\n    NOT_SELECTED:Symbol(),\n    HEXOSE: Symbol(),\n    GLC: Symbol(),\n    MAN: Symbol(),\n    GAL: Symbol(),\n    GUL: Symbol(),\n    ALT: Symbol(),\n    ALL: Symbol(),\n    TAL: Symbol(),\n    IDO: Symbol(),\n    HEXNAC: Symbol(),\n    GLCNAC: Symbol(),\n    MANNAC: Symbol(),\n    GALNAC: Symbol(),\n    GULNAC: Symbol(),\n    ALTNAC: Symbol(),\n    ALLNAC: Symbol(),\n    TALNAC: Symbol(),\n    IDONAC: Symbol(),\n    HEXOSAMINE: Symbol(),\n    GLCN: Symbol(),\n    MANN: Symbol(),\n    GALN: Symbol(),\n    GULN: Symbol(),\n    ALTN: Symbol(),\n    ALLN: Symbol(),\n    TALN: Symbol(),\n    IDON: Symbol(),\n    HEXURONATE: Symbol(),\n    GLCA: Symbol(),\n    MANA: Symbol(),\n    GALA: Symbol(),\n    GULA: Symbol(),\n    ALTA: Symbol(),\n    ALLA: Symbol(),\n    TALA: Symbol(),\n    IDOA: Symbol(),\n    DEOXYHEXOSE: Symbol(),\n    QUI: Symbol(),\n    RHA: Symbol(),\n    D6GUL: Symbol(),\n    D6ALT: Symbol(),\n    D6TAL: Symbol(),\n    FUC: Symbol(),\n    DEOXYHEXNAC: Symbol(),\n    QUINAC: Symbol(),\n    RHANAC: Symbol(),\n    D6ALTNAC: Symbol(),\n    D6TALNAC: Symbol(),\n    FUCNAC: Symbol(),\n    DI_DEOXYHEXOSE: Symbol(),\n    OLI: Symbol(),\n    TYV: Symbol(),\n    ABE: Symbol(),\n    PAR: Symbol(),\n    DIG: Symbol(),\n    COL: Symbol(),\n    PENTOSE: Symbol(),\n    ARA: Symbol(),\n    LYX: Symbol(),\n    XYL: Symbol(),\n    RIB: Symbol(),\n    DEOXYNONULOSONATE: Symbol(),\n    KDN: Symbol(),\n    NEU5AC: Symbol(),\n    NEU5GC: Symbol(),\n    NEU: Symbol(),\n    SIA: Symbol(),\n    DI_DEOXYNONULOSONATE: Symbol(),\n    PSE: Symbol(),\n    LEG: Symbol(),\n    ACI: Symbol(),\n    E4LEG: Symbol(),\n    UNKNOWN: Symbol(),\n    BAC: Symbol(),\n    LDMANHEP: Symbol(),\n    KDO: Symbol(),\n    DHA: Symbol(),\n    DDMANHEP: Symbol(),\n    MURNAC: Symbol(),\n    MURNGC: Symbol(),\n    MUR: Symbol(),\n    ASSIGNED: Symbol(),\n    API: Symbol(),\n    FRU: Symbol(),\n    TAG: Symbol(),\n    SOR: Symbol(),\n    PSI: Symbol()\n};","import { SVG_convert } from \"./SVG_converter\";\n\nlet http = require(\"http\");\n\nconsole.log(\"start\\n\");\n\nlet server = http.createServer(function(req, res) {\n    console.log(\"connected\");\n    if (req.method == \"POST\") {\n        let body = \"\";\n        // data受信イベントの発生時に断片データ(chunk)を取得\n        // body 変数に連結\n        req.on(\"data\", function(chunk) {\n            body += chunk;\n        });\n\n        // 受信完了(end)イベント発生時\n        req.on(\"end\", function() {\n            let result = SVG_convert(body);\n            console.log(\"finish\");\n            res.end( \"\\n\" + result + \"\\n\");\n        });\n    }\n}).listen(1337, \"0.0.0.0\");","module.exports = require(\"http\");"],"sourceRoot":""}